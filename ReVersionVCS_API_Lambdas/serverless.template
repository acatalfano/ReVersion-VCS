{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Transform" : "AWS::Serverless-2016-10-31",
  "Description" : "AWS Serverless API that exposes functions for interfacing with the ReVersion VCS.",
  "Parameters" : {
	"DBName" : {
		"Type" : "String",
		"Description" : "The name for the PostgreSQL database",
		"MinLength" : "1",
		"MaxLength" : "63"
	},
	"DBUsername" : { 
		"Type" : "String",
		"Description" : "Master username for PostgreSQL database",
		"MinLength" : "1",
		"MaxLength" : "41",
		"AllowedPattern" : "^[a-zA-Z0-9]+$"
	},
	"DBPassword" : { 
		"Type" : "String",
		"Description" : "Master password for PostgreSQL database",
		"NoEcho" : "true",
		"MinLength" : "1",
		"MaxLength" : "41"
	},
	"DBPort" : {
		"Type" : "Number",
		"Description" : "TCP/IP port for the database",
		"MinValue" : "1150",
		"MaxValue" : "65535",
		"Default" : "5432"
	},
	"DBHostname" : {
		"Type" : "String",
		"Description" : "Hostname (endpoint) for PostgreSQL database",
		"MinLength" : "1"
	},
	"DBAllocatedStorage" : {
		"Type": "String",
		"Description": "Allocated storage size in GB",
		"MinLength" : "1"
	},
	"DBInstanceClass" : {
		"Type" : "String",
		"Description" : "Name of the compute and memory capacity classes of the DB instance",
		"MinLength" : "1"
	},
	"VPCSecurityGroupID" : {
		"Type" : "String",
		"Description" : "ID of VPC Security Group for the Database",
		"MinLength" : "1"
	}
  },

  "Resources" : {

    "GetRepositories" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "ReVersionVCS_API_Lambdas::ReVersionVCS_API_Lambdas.Functions::GetRepositoriesAsync",
        "Runtime": "dotnetcore2.1",
        "CodeUri": "",
        "Description": "Function to get a list of all repositories",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": "arn:aws:iam::761575818457:role/Lambda-ReVersion-VPC-And-S3-Role",
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
			"RDS_DB_HOSTNAME" : { "Ref" : "DBHostname" },
            "RDS_DB_PORT" : { "Ref" : "DBPort" },
			"RDS_DB_NAME" : { "Ref" : "DBName" },
			"RDS_DB_USERNAME" : { "Ref" : "DBUsername" },
			"RDS_DB_PASSWORD" : { "Ref" : "DBPassword" }
          }
        },
        "Events": {
          "PutResource": {
            "Type": "Api",
            "Properties": {
              "Path": "/repositories",
              "Method": "GET"
            }
          }
        }
      }
    },

    "CreateRepository" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "ReVersionVCS_API_Lambdas::ReVersionVCS_API_Lambdas.Functions::CreateRepositoryAsync",
        "Runtime": "dotnetcore2.1",
        "CodeUri": "",
        "Description": "Function to create a repository",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": "arn:aws:iam::761575818457:role/Lambda-ReVersion-VPC-And-S3-Role",
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
			"RDS_DB_HOSTNAME" : { "Ref" : "DBHostname" },
            "RDS_DB_PORT" : { "Ref" : "DBPort" },
			"RDS_DB_NAME" : { "Ref" : "DBName" },
			"RDS_DB_USERNAME" : { "Ref" : "DBUsername" },
			"RDS_DB_PASSWORD" : { "Ref" : "DBPassword" },
			"S3_REGION" : { "Ref" : "AWS::Region" }
          }
        },
        "Events": {
          "PutResource": {
            "Type": "Api",
            "Properties": {
              "Path": "/repositories",
              "Method": "POST"
            }
          }
        }
      }
    },
    
    "DeleteRepository" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "ReVersionVCS_API_Lambdas::ReVersionVCS_API_Lambdas.Functions::DeleteRepositoryAsync",
        "Runtime": "dotnetcore2.1",
        "CodeUri": "",
        "Description": "Function to delete an entire repository",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": "arn:aws:iam::761575818457:role/Lambda-ReVersion-VPC-And-S3-Role",
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
			"RDS_DB_HOSTNAME" : { "Ref" : "DBHostname" },
            "RDS_DB_PORT" : { "Ref" : "DBPort" },
			"RDS_DB_NAME" : { "Ref" : "DBName" },
			"RDS_DB_USERNAME" : { "Ref" : "DBUsername" },
			"RDS_DB_PASSWORD" : { "Ref" : "DBPassword" },
			"S3_REGION" : { "Ref" : "AWS::Region" }
          }
        },
        "Events": {
          "PutResource": {
            "Type": "Api",
            "Properties": {
              "Path": "/repositories/{repositoryId}",
              "Method": "DELETE"
            }
          }
        }
      }
    },
	
    "GetBranches" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "ReVersionVCS_API_Lambdas::ReVersionVCS_API_Lambdas.Functions::GetBranchesAsync",
        "Runtime": "dotnetcore2.1",
        "CodeUri": "",
        "Description": "Function to get a list of all branches in the repository",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": "arn:aws:iam::761575818457:role/Lambda-ReVersion-VPC-And-S3-Role",
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
			"RDS_DB_HOSTNAME" : { "Ref" : "DBHostname" },
            "RDS_DB_PORT" : { "Ref" : "DBPort" },
			"RDS_DB_NAME" : { "Ref" : "DBName" },
			"RDS_DB_USERNAME" : { "Ref" : "DBUsername" },
			"RDS_DB_PASSWORD" : { "Ref" : "DBPassword" }
          }
        },
        "Events": {
          "PutResource": {
            "Type": "Api",
            "Properties": {
              "Path": "/repositories/{repositoryId}/branches",
              "Method": "GET"
            }
          }
        }
      }
    },

	"CreateBranch" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "ReVersionVCS_API_Lambdas::ReVersionVCS_API_Lambdas.Functions::CreateBranchAsync",
        "Runtime": "dotnetcore2.1",
        "CodeUri": "",
        "Description": "Function to create a new branch within the repository",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": "arn:aws:iam::761575818457:role/Lambda-ReVersion-VPC-And-S3-Role",
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
			"RDS_DB_HOSTNAME" : { "Ref" : "DBHostname" },
            "RDS_DB_PORT" : { "Ref" : "DBPort" },
			"RDS_DB_NAME" : { "Ref" : "DBName" },
			"RDS_DB_USERNAME" : { "Ref" : "DBUsername" },
			"RDS_DB_PASSWORD" : { "Ref" : "DBPassword" },
			"S3_REGION" : { "Ref" : "AWS::Region" }
          }
        },
        "Events": {
          "PutResource": {
            "Type": "Api",
            "Properties": {
              "Path": "/repositories/{repositoryId}/branches",
              "Method": "POST"
            }
          }
        }
      }
    },

	"GetBranch" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "ReVersionVCS_API_Lambdas::ReVersionVCS_API_Lambdas.Functions::GetBranchAsync",
        "Runtime": "dotnetcore2.1",
        "CodeUri": "",
        "Description": "Function to get a list of all objects within a branch",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": "arn:aws:iam::761575818457:role/Lambda-ReVersion-VPC-And-S3-Role",
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
			"RDS_DB_HOSTNAME" : { "Ref" : "DBHostname" },
            "RDS_DB_PORT" : { "Ref" : "DBPort" },
			"RDS_DB_NAME" : { "Ref" : "DBName" },
			"RDS_DB_USERNAME" : { "Ref" : "DBUsername" },
			"RDS_DB_PASSWORD" : { "Ref" : "DBPassword" }
          }
        },
        "Events": {
          "PutResource": {
            "Type": "Api",
            "Properties": {
              "Path": "/repositories/{repositoryId}/branches/{branchId}",
              "Method": "GET"
            }
          }
        }
      }
    },
	
	"CommitChanges" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "ReVersionVCS_API_Lambdas::ReVersionVCS_API_Lambdas.Functions::CommitChangesAsync",
        "Runtime": "dotnetcore2.1",
        "CodeUri": "",
        "Description": "Function to commit changes to branch",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": "arn:aws:iam::761575818457:role/Lambda-ReVersion-VPC-And-S3-Role",
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
			"RDS_DB_HOSTNAME" : { "Ref" : "DBHostname" },
            "RDS_DB_PORT" : { "Ref" : "DBPort" },
			"RDS_DB_NAME" : { "Ref" : "DBName" },
			"RDS_DB_USERNAME" : { "Ref" : "DBUsername" },
			"RDS_DB_PASSWORD" : { "Ref" : "DBPassword" },
			"S3_REGION" : { "Ref" : "AWS::Region" }
          }
        },
        "Events": {
          "PutResource": {
            "Type": "Api",
            "Properties": {
              "Path": "/repositories/{repositoryId}/branches/{branchId}",
              "Method": "PUT"
            }
          }
        }
      }
    },
	
	"GetObject" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "ReVersionVCS_API_Lambdas::ReVersionVCS_API_Lambdas.Functions::GetObjectAsync",
        "Runtime": "dotnetcore2.1",
        "CodeUri": "",
        "Description": "Function to get a file within the branch",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": "arn:aws:iam::761575818457:role/Lambda-ReVersion-VPC-And-S3-Role",
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
			"RDS_DB_HOSTNAME" : { "Ref" : "DBHostname" },
            "RDS_DB_PORT" : { "Ref" : "DBPort" },
			"RDS_DB_NAME" : { "Ref" : "DBName" },
			"RDS_DB_USERNAME" : { "Ref" : "DBUsername" },
			"RDS_DB_PASSWORD" : { "Ref" : "DBPassword" },
			"S3_REGION" : { "Ref" : "AWS::Region" }
          }
        },
        "Events": {
          "PutResource": {
            "Type": "Api",
            "Properties": {
              "Path": "/repositories/{repositoryId}/branches/{branchId}/object",
              "Method": "GET"
            }
          }
        }
      }
    },
	
	"GetVersions" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "ReVersionVCS_API_Lambdas::ReVersionVCS_API_Lambdas.Functions::GetVersionsAsync",
        "Runtime": "dotnetcore2.1",
        "CodeUri": "",
        "Description": "Function to get a list of versions within a branch",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": "arn:aws:iam::761575818457:role/Lambda-ReVersion-VPC-And-S3-Role",
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
			"RDS_DB_HOSTNAME" : { "Ref" : "DBHostname" },
            "RDS_DB_PORT" : { "Ref" : "DBPort" },
			"RDS_DB_NAME" : { "Ref" : "DBName" },
			"RDS_DB_USERNAME" : { "Ref" : "DBUsername" },
			"RDS_DB_PASSWORD" : { "Ref" : "DBPassword" }
          }
        },
        "Events": {
          "PutResource": {
            "Type": "Api",
            "Properties": {
              "Path": "/repositories/{repositoryId}/branches/{branchId}/versions",
              "Method": "GET"
            }
          }
        }
      }
    },

	"GetVersion" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "ReVersionVCS_API_Lambdas::ReVersionVCS_API_Lambdas.Functions::GetVersionAsync",
        "Runtime": "dotnetcore2.1",
        "CodeUri": "",
        "Description": "Function to get a list of files within a version of a branch",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": "arn:aws:iam::761575818457:role/Lambda-ReVersion-VPC-And-S3-Role",
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
			"RDS_DB_HOSTNAME" : { "Ref" : "DBHostname" },
            "RDS_DB_PORT" : { "Ref" : "DBPort" },
			"RDS_DB_NAME" : { "Ref" : "DBName" },
			"RDS_DB_USERNAME" : { "Ref" : "DBUsername" },
			"RDS_DB_PASSWORD" : { "Ref" : "DBPassword" }
          }
        },
        "Events": {
          "PutResource": {
            "Type": "Api",
            "Properties": {
              "Path": "/repositories/{repositoryId}/branches/{branchId}/versions/{versionId}",
              "Method": "GET"
            }
          }
        }
      }
    },

	"GetPastObject" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "ReVersionVCS_API_Lambdas::ReVersionVCS_API_Lambdas.Functions::GetPastObjectAsync",
        "Runtime": "dotnetcore2.1",
        "CodeUri": "",
        "Description": "Function to get a file from a non-current version of a branch",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": "arn:aws:iam::761575818457:role/Lambda-ReVersion-VPC-And-S3-Role",
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
			"RDS_DB_HOSTNAME" : { "Ref" : "DBHostname" },
            "RDS_DB_PORT" : { "Ref" : "DBPort" },
			"RDS_DB_NAME" : { "Ref" : "DBName" },
			"RDS_DB_USERNAME" : { "Ref" : "DBUsername" },
			"RDS_DB_PASSWORD" : { "Ref" : "DBPassword" },
			"S3_REGION" : { "Ref" : "AWS::Region" }
          }
        },
        "Events": {
          "PutResource": {
            "Type": "Api",
            "Properties": {
              "Path": "/repositories/{repositoryId}/branches/{branchId}/versions/{versionId}/object",
              "Method": "GET"
            }
          }
        }
      }
    },

	"MergeBranch" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "ReVersionVCS_API_Lambdas::ReVersionVCS_API_Lambdas.Functions::MergeBranchAsync",
        "Runtime": "dotnetcore2.1",
        "CodeUri": "",
        "Description": "Function to merge a branch with its parent",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": "arn:aws:iam::761575818457:role/Lambda-ReVersion-VPC-And-S3-Role",
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
			"RDS_DB_HOSTNAME" : { "Ref" : "DBHostname" },
            "RDS_DB_PORT" : { "Ref" : "DBPort" },
			"RDS_DB_NAME" : { "Ref" : "DBName" },
			"RDS_DB_USERNAME" : { "Ref" : "DBUsername" },
			"RDS_DB_PASSWORD" : { "Ref" : "DBPassword" },
			"S3_REGION" : { "Ref" : "AWS::Region" }
          }
        },
        "Events": {
          "PutResource": {
            "Type": "Api",
            "Properties": {
              "Path": "/repositories/{repositoryId}/branches/{branchId}/merge",
              "Method": "PUT"
            }
          }
        }
      }
    },

	"LockBranch" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "ReVersionVCS_API_Lambdas::ReVersionVCS_API_Lambdas.Functions::LockBranchAsync",
        "Runtime": "dotnetcore2.1",
        "CodeUri": "",
        "Description": "Function to put a lock on a branch",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": "arn:aws:iam::761575818457:role/Lambda-ReVersion-VPC-And-S3-Role",
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
			"RDS_DB_HOSTNAME" : { "Ref" : "DBHostname" },
            "RDS_DB_PORT" : { "Ref" : "DBPort" },
			"RDS_DB_NAME" : { "Ref" : "DBName" },
			"RDS_DB_USERNAME" : { "Ref" : "DBUsername" },
			"RDS_DB_PASSWORD" : { "Ref" : "DBPassword" }
          }
        },
        "Events": {
          "PutResource": {
            "Type": "Api",
            "Properties": {
              "Path": "/repositories/{repositoryId}/branches/{branchId}/lock",
              "Method": "PUT"
            }
          }
        }
      }
    },

	"UnlockBranch" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "ReVersionVCS_API_Lambdas::ReVersionVCS_API_Lambdas.Functions::UnlockBranchAsync",
        "Runtime": "dotnetcore2.1",
        "CodeUri": "",
        "Description": "Function to remove the lock from a branch (only works if the same user set the lock)",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": "arn:aws:iam::761575818457:role/Lambda-ReVersion-VPC-And-S3-Role",
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
			"RDS_DB_HOSTNAME" : { "Ref" : "DBHostname" },
            "RDS_DB_PORT" : { "Ref" : "DBPort" },
			"RDS_DB_NAME" : { "Ref" : "DBName" },
			"RDS_DB_USERNAME" : { "Ref" : "DBUsername" },
			"RDS_DB_PASSWORD" : { "Ref" : "DBPassword" }
          }
        },
        "Events": {
          "PutResource": {
            "Type": "Api",
            "Properties": {
              "Path": "/repositories/{repositoryId}/branches/{branchId}/unlock",
              "Method": "PUT"
            }
          }
        }
      }
    },

	"BreakLock" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "ReVersionVCS_API_Lambdas::ReVersionVCS_API_Lambdas.Functions::BreakLockAsync",
        "Runtime": "dotnetcore2.1",
        "CodeUri": "",
        "Description": "Function to force-remove a lock from a branch (anyone can do this)",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": "arn:aws:iam::761575818457:role/Lambda-ReVersion-VPC-And-S3-Role",
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
			"RDS_DB_HOSTNAME" : { "Ref" : "DBHostname" },
            "RDS_DB_PORT" : { "Ref" : "DBPort" },
			"RDS_DB_NAME" : { "Ref" : "DBName" },
			"RDS_DB_USERNAME" : { "Ref" : "DBUsername" },
			"RDS_DB_PASSWORD" : { "Ref" : "DBPassword" }
          }
        },
        "Events": {
          "PutResource": {
            "Type": "Api",
            "Properties": {
              "Path": "/repositories/{repositoryId}/branches/{branchId}/force-unlock",
              "Method": "PUT"
            }
          }
        }
      }
    },

	"RequestPermission" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "ReVersionVCS_API_Lambdas::ReVersionVCS_API_Lambdas.Functions::RequestPermissionAsync",
        "Runtime": "dotnetcore2.1",
        "CodeUri": "",
        "Description": "Function to request permission to access this repository",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": "arn:aws:iam::761575818457:role/Lambda-ReVersion-VPC-And-S3-Role",
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
			"RDS_DB_HOSTNAME" : { "Ref" : "DBHostname" },
            "RDS_DB_PORT" : { "Ref" : "DBPort" },
			"RDS_DB_NAME" : { "Ref" : "DBName" },
			"RDS_DB_USERNAME" : { "Ref" : "DBUsername" },
			"RDS_DB_PASSWORD" : { "Ref" : "DBPassword" }
          }
        },
        "Events": {
          "PutResource": {
            "Type": "Api",
            "Properties": {
              "Path": "/repositories/{repositoryId}/request-permission",
              "Method": "PUT"
            }
          }
        }
      }
    },

	"GetPermissionRequests" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "ReVersionVCS_API_Lambdas::ReVersionVCS_API_Lambdas.Functions::GetPermissionRequestsAsync",
        "Runtime": "dotnetcore2.1",
        "CodeUri": "",
        "Description": "Function to get a list of pending requests to access repositories owner by the user submitting this request",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": "arn:aws:iam::761575818457:role/Lambda-ReVersion-VPC-And-S3-Role",
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
			"RDS_DB_HOSTNAME" : { "Ref" : "DBHostname" },
            "RDS_DB_PORT" : { "Ref" : "DBPort" },
			"RDS_DB_NAME" : { "Ref" : "DBName" },
			"RDS_DB_USERNAME" : { "Ref" : "DBUsername" },
			"RDS_DB_PASSWORD" : { "Ref" : "DBPassword" }
          }
        },
        "Events": {
          "PutResource": {
            "Type": "Api",
            "Properties": {
              "Path": "/permission-requests",
              "Method": "GET"
            }
          }
        }
      }
    },

	"GrantPermission" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "ReVersionVCS_API_Lambdas::ReVersionVCS_API_Lambdas.Functions::GrantPermissionAsync",
        "Runtime": "dotnetcore2.1",
        "CodeUri": "",
        "Description": "Function to grant the requested access",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": "arn:aws:iam::761575818457:role/Lambda-ReVersion-VPC-And-S3-Role",
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
			"RDS_DB_HOSTNAME" : { "Ref" : "DBHostname" },
            "RDS_DB_PORT" : { "Ref" : "DBPort" },
			"RDS_DB_NAME" : { "Ref" : "DBName" },
			"RDS_DB_USERNAME" : { "Ref" : "DBUsername" },
			"RDS_DB_PASSWORD" : { "Ref" : "DBPassword" }
          }
        },
        "Events": {
          "PutResource": {
            "Type": "Api",
            "Properties": {
              "Path": "/permission-requests/{requestId}/grant",
              "Method": "PUT"
            }
          }
        }
      }
    },

	"DenyPermission" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "ReVersionVCS_API_Lambdas::ReVersionVCS_API_Lambdas.Functions::DenyPermissionAsync",
        "Runtime": "dotnetcore2.1",
        "CodeUri": "",
        "Description": "Function to deny the requested access",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": "arn:aws:iam::761575818457:role/Lambda-ReVersion-VPC-And-S3-Role",
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
			"RDS_DB_HOSTNAME" : { "Ref" : "DBHostname" },
            "RDS_DB_PORT" : { "Ref" : "DBPort" },
			"RDS_DB_NAME" : { "Ref" : "DBName" },
			"RDS_DB_USERNAME" : { "Ref" : "DBUsername" },
			"RDS_DB_PASSWORD" : { "Ref" : "DBPassword" }
          }
        },
        "Events": {
          "PutResource": {
            "Type": "Api",
            "Properties": {
              "Path": "/permission-requests/{requestId}/deny",
              "Method": "PUT"
            }
          }
        }
      }
    },

	"ReVersionDatabaseInstance" : {
		"Type": "AWS::RDS::DBInstance",
		"Properties": {
			"DBName": { "Ref": "DBName" },
			"AllocatedStorage": { "Ref": "DBAllocatedStorage" },
			"DBInstanceClass": { "Ref": "DBInstanceClass" },
			"Engine": "postgres",
			"MasterUsername": { "Ref": "DBUsername" },
			"MasterUserPassword": { "Ref": "DBPassword" },
			"VPCSecurityGroups": [
				{ "Ref" : "VPCSecurityGroupID" }
			],
			"PubliclyAccessible" : false
		}
	}
  }
}