\begin{Verbatim}[commandchars=\\\{\}]
\PYG{k}{using} \PYG{n+nn}{System}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{System.Text}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{System.Collections.Generic}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{System.Linq}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{System.Net}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{System.Threading.Tasks}\PYG{p}{;}

\PYG{k}{using} \PYG{n+nn}{Amazon.Lambda.Core}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{Amazon.Lambda.APIGatewayEvents}\PYG{p}{;}

\PYG{k}{using} \PYG{n+nn}{Newtonsoft.Json}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{Newtonsoft.Json.Serialization}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{ReVersionVCS\PYGZus{}API\PYGZus{}Lambdas.Models}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{ReVersionVCS\PYGZus{}API\PYGZus{}Lambdas.Response\PYGZus{}Objects}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{ReVersionVCS\PYGZus{}API\PYGZus{}Lambdas.Request\PYGZus{}Objects}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{System.Text.RegularExpressions}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{static} \PYG{n}{ReVersionVCS\PYGZus{}API\PYGZus{}Lambdas}\PYG{p}{.}\PYG{n}{SQLOperations}\PYG{p}{;}


\PYG{c+c1}{// Assembly attribute to enable the Lambda function\PYGZsq{}s JSON input to be converted into a .NET class.}
\PYG{n+na}{[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.Json.JsonSerializer))]}

\PYG{k}{namespace} \PYG{n+nn}{ReVersionVCS\PYGZus{}API\PYGZus{}Lambdas}
\PYG{p}{\PYGZob{}}
    \PYG{k}{public} \PYG{k}{partial} \PYG{k}{class} \PYG{n+nc}{Functions}
    \PYG{p}{\PYGZob{}}
        \PYG{k}{private} \PYG{k}{readonly} \PYG{n}{JsonSerializerSettings} \PYG{n}{jsonSerializerSettings}\PYG{p}{;}

        \PYG{k}{private} \PYG{n}{S3Operations} \PYG{n}{s3Ops}\PYG{p}{;}

        
        \PYG{k}{const} \PYG{k+kt}{string} \PYG{n}{S3\PYGZus{}REGION\PYGZus{}ENVIRONMENT\PYGZus{}VARIABLE\PYGZus{}LOOKUP} \PYG{p}{=} \PYG{l+s}{\PYGZdq{}S3\PYGZus{}REGION\PYGZdq{}}\PYG{p}{;}

        \PYG{k}{public} \PYG{k}{const} \PYG{k+kt}{string} \PYG{n}{ID\PYGZus{}QUERY\PYGZus{}STRING\PYGZus{}NAME} \PYG{p}{=} \PYG{l+s}{\PYGZdq{}Id\PYGZdq{}}\PYG{p}{;}
        
        \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
        \PYG{c+c1}{/// Default constructor that Lambda will invoke.}
        \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
        \PYG{k}{public} \PYG{n+nf}{Functions}\PYG{p}{()}
        \PYG{p}{\PYGZob{}}
            \PYG{c+c1}{// set jsonSerializerSettings to properly handle Camel\PYGZhy{}Case Names}
            \PYG{c+c1}{//  i.e. the JSON property \PYGZdq{}fooBar\PYGZdq{} serializes to the C\PYGZsh{} property \PYGZdq{}FooBar\PYGZdq{}}
            \PYG{n}{DefaultContractResolver} \PYG{n}{contractResolver} \PYG{p}{=} \PYG{k}{new} \PYG{n}{DefaultContractResolver}
            \PYG{p}{\PYGZob{}}
                \PYG{n}{NamingStrategy} \PYG{p}{=} \PYG{k}{new} \PYG{n}{CamelCaseNamingStrategy}\PYG{p}{()}
            \PYG{p}{\PYGZcb{};}
            \PYG{n}{jsonSerializerSettings} \PYG{p}{=} \PYG{k}{new} \PYG{n}{JsonSerializerSettings}
            \PYG{p}{\PYGZob{}}
                \PYG{n}{ContractResolver} \PYG{p}{=} \PYG{n}{contractResolver}
            \PYG{p}{\PYGZcb{};}
        \PYG{p}{\PYGZcb{}}


        \PYG{c+c1}{// TODO: add authorization check and return 401 (HttpStatusCode.Unauthorized) for everything (unless this is handled by API Gatway)}
        \PYG{c+c1}{// TODO: same for 500 code (HttpStatusCode.InternalServerError)}
        \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
        \PYG{c+c1}{/// A Lambda function that gets a list of all of the repositories}
        \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}request\PYGZdq{}\PYGZgt{}\PYGZlt{}/param\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}\PYGZlt{}/returns\PYGZgt{}}
        \PYG{k}{public} \PYG{k}{async} \PYG{n}{Task}\PYG{p}{\PYGZlt{}}\PYG{n}{APIGatewayProxyResponse}\PYG{p}{\PYGZgt{}} \PYG{n}{GetRepositoriesAsync}\PYG{p}{(}\PYG{n}{APIGatewayProxyRequest} \PYG{n}{request}\PYG{p}{,} \PYG{n}{ILambdaContext} \PYG{n}{context}\PYG{p}{)}
        \PYG{p}{\PYGZob{}}
            \PYG{k}{return} 
                \PYG{k}{await} \PYG{n}{Task}\PYG{p}{.}\PYG{n}{Run}\PYG{p}{(()} \PYG{p}{=\PYGZgt{}}
                    \PYG{p}{\PYGZob{}}
                        \PYG{k}{using} \PYG{p}{(}\PYG{n}{ReVersion\PYGZus{}DatabaseContext} \PYG{n}{db} \PYG{p}{=} \PYG{k}{new} \PYG{n}{ReVersion\PYGZus{}DatabaseContext}\PYG{p}{())}
                        \PYG{p}{\PYGZob{}}
                            \PYG{n}{List}\PYG{p}{\PYGZlt{}}\PYG{n}{RepositoryLookup}\PYG{p}{\PYGZgt{}} \PYG{n}{repositoryNames} \PYG{p}{=} \PYG{n}{QueryRepositories}\PYG{p}{(}\PYG{n}{db}\PYG{p}{);}
                            \PYG{n}{List}\PYG{p}{\PYGZlt{}}\PYG{n}{ResourceItem}\PYG{p}{\PYGZgt{}} \PYG{n}{repositoryResponse} \PYG{p}{=} \PYG{n}{repositoryNames}\PYG{p}{.}\PYG{n}{Select}\PYG{p}{(}\PYG{n}{x} \PYG{p}{=\PYGZgt{}} \PYG{k}{new} \PYG{n}{ResourceItem}
                            \PYG{p}{\PYGZob{}}
                                \PYG{n}{DisplayData} \PYG{p}{=} \PYG{n}{x}\PYG{p}{.}\PYG{n}{Name}\PYG{p}{,}
                                \PYG{n}{Owner} \PYG{p}{=} \PYG{n}{x}\PYG{p}{.}\PYG{n}{Owner}\PYG{p}{,}
                                \PYG{n}{Href} \PYG{p}{=} \PYG{n}{request}\PYG{p}{.}\PYG{n}{Path} \PYG{p}{+} \PYG{err}{\PYGZdl{}}\PYG{l+s}{\PYGZdq{}/\PYGZob{}x.Name\PYGZcb{}\PYGZdq{}}
                            \PYG{p}{\PYGZcb{}).}\PYG{n}{ToList}\PYG{p}{();}

                            \PYG{k+kt}{var} \PYG{n}{response} \PYG{p}{=} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse}
                            \PYG{p}{\PYGZob{}}
                                \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{OK}\PYG{p}{,}
                                \PYG{n}{Body} \PYG{p}{=} \PYG{n}{JsonConvert}\PYG{p}{.}\PYG{n}{SerializeObject}\PYG{p}{(}\PYG{k}{new} \PYG{p}{\PYGZob{}} \PYG{n}{Resources} \PYG{p}{=} \PYG{n}{repositoryResponse} \PYG{p}{\PYGZcb{},} \PYG{n}{jsonSerializerSettings}\PYG{p}{),}
                                \PYG{n}{Headers} \PYG{p}{=} \PYG{k}{new} \PYG{n}{Dictionary}\PYG{p}{\PYGZlt{}}\PYG{k+kt}{string}\PYG{p}{,} \PYG{k+kt}{string}\PYG{p}{\PYGZgt{}} \PYG{p}{\PYGZob{}} \PYG{p}{\PYGZob{}} \PYG{l+s}{\PYGZdq{}Content\PYGZhy{}Type\PYGZdq{}}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}application/json\PYGZdq{}} \PYG{p}{\PYGZcb{}} \PYG{p}{\PYGZcb{}}
                            \PYG{p}{\PYGZcb{};}

                            \PYG{k}{return} \PYG{n}{response}\PYG{p}{;}
                        \PYG{p}{\PYGZcb{}}
                    \PYG{p}{\PYGZcb{});}
        \PYG{p}{\PYGZcb{}}

        \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
        \PYG{c+c1}{/// A Lambda function that creates a new repository}
        \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}request\PYGZdq{}\PYGZgt{}\PYGZlt{}/param\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}\PYGZlt{}/returns\PYGZgt{}}
        \PYG{k}{public} \PYG{k}{async} \PYG{n}{Task}\PYG{p}{\PYGZlt{}}\PYG{n}{APIGatewayProxyResponse}\PYG{p}{\PYGZgt{}} \PYG{n}{CreateRepositoryAsync}\PYG{p}{(}\PYG{n}{APIGatewayProxyRequest} \PYG{n}{request}\PYG{p}{,} \PYG{n}{ILambdaContext} \PYG{n}{context}\PYG{p}{)}
        \PYG{p}{\PYGZob{}}
            \PYG{k}{using} \PYG{p}{(}\PYG{k+kt}{var} \PYG{n}{db} \PYG{p}{=} \PYG{k}{new} \PYG{n}{ReVersion\PYGZus{}DatabaseContext}\PYG{p}{())}
            \PYG{p}{\PYGZob{}}
                \PYG{n}{s3Ops} \PYG{p}{=} \PYG{k}{new} \PYG{n}{S3Operations}\PYG{p}{(}\PYG{n}{Environment}\PYG{p}{.}\PYG{n}{GetEnvironmentVariable}\PYG{p}{(}\PYG{n}{S3\PYGZus{}REGION\PYGZus{}ENVIRONMENT\PYGZus{}VARIABLE\PYGZus{}LOOKUP}\PYG{p}{));}
                
                \PYG{n}{RepositoryData} \PYG{n}{requestBody}\PYG{p}{;}
                \PYG{k}{try}
                \PYG{p}{\PYGZob{}}
                    \PYG{n}{requestBody} \PYG{p}{=} \PYG{n}{JsonConvert}\PYG{p}{.}\PYG{n}{DeserializeObject}\PYG{p}{\PYGZlt{}}\PYG{n}{RepositoryData}\PYG{p}{\PYGZgt{}(}\PYG{n}{request}\PYG{p}{.}\PYG{n}{Body}\PYG{p}{,} \PYG{n}{jsonSerializerSettings}\PYG{p}{);}
                \PYG{p}{\PYGZcb{}}
                \PYG{k}{catch} \PYG{p}{(}\PYG{n}{Exception}\PYG{p}{)}
                \PYG{p}{\PYGZob{}}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse}
                    \PYG{p}{\PYGZob{}}
                        \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{BadRequest}
                    \PYG{p}{\PYGZcb{};}
                \PYG{p}{\PYGZcb{}}

                \PYG{k+kt}{string} \PYG{n}{repo} \PYG{p}{=} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{RepositoryId}\PYG{p}{;}
                \PYG{k+kt}{string} \PYG{n}{user} \PYG{p}{=} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{UserName}\PYG{p}{;}
                \PYG{k+kt}{string} \PYG{n}{bucketname} \PYG{p}{=} \PYG{n}{S3Operations}\PYG{p}{.}\PYG{n}{bucketPrefix} \PYG{p}{+} \PYG{l+s+sc}{\PYGZsq{}.\PYGZsq{}} \PYG{p}{+} \PYG{n}{repo}\PYG{p}{.}\PYG{n}{ToLower}\PYG{p}{()} \PYG{p}{+} \PYG{l+s}{\PYGZdq{}.main\PYGZdq{}}\PYG{p}{;}
                \PYG{k}{if} \PYG{p}{(} \PYG{p}{!}\PYG{n}{BucketNameValid}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{bucketname}\PYG{p}{)} \PYG{p}{||} \PYG{p}{!}\PYG{n}{UsernameExists}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{user}\PYG{p}{))}
                \PYG{p}{\PYGZob{}}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse}
                    \PYG{p}{\PYGZob{}}
                        \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{BadRequest}
                    \PYG{p}{\PYGZcb{};}
                \PYG{p}{\PYGZcb{}}

                \PYG{k}{if} \PYG{p}{(}\PYG{n}{RepositoryExists}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{))}
                \PYG{p}{\PYGZob{}}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse}
                    \PYG{p}{\PYGZob{}}
                        \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{Conflict}
                    \PYG{p}{\PYGZcb{};}
                \PYG{p}{\PYGZcb{}}

                \PYG{n}{InsertIntoRepoTable}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{user}\PYG{p}{);}
                \PYG{n}{InsertIntoBranchTable}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}main\PYGZdq{}}\PYG{p}{);}
                \PYG{n}{InsertIntoRepoPermissionsTable}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{user}\PYG{p}{);}
                \PYG{k}{await} \PYG{n}{s3Ops}\PYG{p}{.}\PYG{n}{CreateS3BucketAsync}\PYG{p}{(}\PYG{n}{repo}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}main\PYGZdq{}}\PYG{p}{);}
                \PYG{n}{InsertIntoEventLog}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}main\PYGZdq{}}\PYG{p}{,} \PYG{n}{user}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{Message}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}create\PYGZus{}repository\PYGZdq{}}\PYG{p}{);}

                \PYG{k+kt}{var} \PYG{n}{responseObject} \PYG{p}{=} \PYG{k}{new} \PYG{n}{ResourceItem}
                \PYG{p}{\PYGZob{}}
                    \PYG{n}{DisplayData} \PYG{p}{=} \PYG{n}{repo}\PYG{p}{,}
                    \PYG{n}{Href} \PYG{p}{=} \PYG{n}{request}\PYG{p}{.}\PYG{n}{Path} \PYG{p}{+} \PYG{err}{\PYGZdl{}}\PYG{l+s}{\PYGZdq{}/\PYGZob{}repo\PYGZcb{}\PYGZdq{}}\PYG{p}{,}
                    \PYG{n}{Owner} \PYG{p}{=} \PYG{n}{user}
                \PYG{p}{\PYGZcb{};}

                \PYG{k}{await} \PYG{n}{db}\PYG{p}{.}\PYG{n}{SaveChangesAsync}\PYG{p}{();}
                \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse}
                \PYG{p}{\PYGZob{}}
                    \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{Created}\PYG{p}{,}
                    \PYG{n}{Body} \PYG{p}{=} \PYG{n}{JsonConvert}\PYG{p}{.}\PYG{n}{SerializeObject}\PYG{p}{(}\PYG{n}{responseObject}\PYG{p}{),}
                    \PYG{n}{Headers} \PYG{p}{=} \PYG{k}{new} \PYG{n}{Dictionary}\PYG{p}{\PYGZlt{}}\PYG{k+kt}{string}\PYG{p}{,} \PYG{k+kt}{string}\PYG{p}{\PYGZgt{}} \PYG{p}{\PYGZob{}} \PYG{p}{\PYGZob{}} \PYG{l+s}{\PYGZdq{}Content\PYGZhy{}Type\PYGZdq{}}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}application/json\PYGZdq{}} \PYG{p}{\PYGZcb{}} \PYG{p}{\PYGZcb{}}
                \PYG{p}{\PYGZcb{};}
            \PYG{p}{\PYGZcb{}}
        \PYG{p}{\PYGZcb{}}

        \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
        \PYG{c+c1}{/// A Lambda function that deletes an entire repository}
        \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}request\PYGZdq{}\PYGZgt{}\PYGZlt{}/param\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}\PYGZlt{}/returns\PYGZgt{}}
        \PYG{k}{public} \PYG{k}{async} \PYG{n}{Task}\PYG{p}{\PYGZlt{}}\PYG{n}{APIGatewayProxyResponse}\PYG{p}{\PYGZgt{}} \PYG{n}{DeleteRepositoryAsync}\PYG{p}{(}\PYG{n}{APIGatewayProxyRequest} \PYG{n}{request}\PYG{p}{,} \PYG{n}{ILambdaContext} \PYG{n}{context}\PYG{p}{)}
        \PYG{p}{\PYGZob{}}

            \PYG{k}{using} \PYG{p}{(}\PYG{k+kt}{var} \PYG{n}{db} \PYG{p}{=} \PYG{k}{new} \PYG{n}{ReVersion\PYGZus{}DatabaseContext}\PYG{p}{())}
            \PYG{p}{\PYGZob{}}
                \PYG{n}{s3Ops} \PYG{p}{=} \PYG{k}{new} \PYG{n}{S3Operations}\PYG{p}{(}\PYG{n}{Environment}\PYG{p}{.}\PYG{n}{GetEnvironmentVariable}\PYG{p}{(}\PYG{n}{S3\PYGZus{}REGION\PYGZus{}ENVIRONMENT\PYGZus{}VARIABLE\PYGZus{}LOOKUP}\PYG{p}{));}

                \PYG{k}{if} \PYG{p}{(}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters} \PYG{p}{==} \PYG{k}{null} \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{ContainsKey}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}repositoryId\PYGZdq{}}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}

                \PYG{k+kt}{string} \PYG{n}{repo}\PYG{p}{;}
                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{TryGetValue}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}repositoryId\PYGZdq{}}\PYG{p}{,} \PYG{k}{out} \PYG{n}{repo}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}

                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{RepositoryExists}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{NotFound} \PYG{p}{\PYGZcb{};}

                \PYG{n}{List}\PYG{p}{\PYGZlt{}}\PYG{n}{BranchLookup}\PYG{p}{\PYGZgt{}} \PYG{n}{branches} \PYG{p}{=} \PYG{n}{QueryBranches}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{);}

                \PYG{k}{foreach} \PYG{p}{(}\PYG{k+kt}{var} \PYG{n}{branch} \PYG{k}{in} \PYG{n}{branches}\PYG{p}{)}
                \PYG{p}{\PYGZob{}}
                    \PYG{k}{if} \PYG{p}{(}\PYG{n}{branch}\PYG{p}{.}\PYG{n}{Locked}\PYG{p}{)}
                        \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{Conflict} \PYG{p}{\PYGZcb{};}
                \PYG{p}{\PYGZcb{}}

                \PYG{n}{DeleteAllFromBranchesTable}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{);}
                \PYG{n}{DeleteAllFromVersionsTable}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{);}
                \PYG{n}{DeleteAllFromPermissionsTable}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{);}
                \PYG{n}{DeleteAllFromPermissionRequestsTable}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{);}
                \PYG{n}{DeleteFromRepositoryTable}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{);}

                \PYG{k}{await} \PYG{n}{db}\PYG{p}{.}\PYG{n}{SaveChangesAsync}\PYG{p}{();}
                \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{NoContent} \PYG{p}{\PYGZcb{};}
            \PYG{p}{\PYGZcb{}}
        \PYG{p}{\PYGZcb{}}

        \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
        \PYG{c+c1}{/// A Lambda function that gets a list of all of the branches in the repository}
        \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}request\PYGZdq{}\PYGZgt{}\PYGZlt{}/param\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}\PYGZlt{}/returns\PYGZgt{}}
        \PYG{k}{public} \PYG{k}{async} \PYG{n}{Task}\PYG{p}{\PYGZlt{}}\PYG{n}{APIGatewayProxyResponse}\PYG{p}{\PYGZgt{}} \PYG{n}{GetBranchesAsync}\PYG{p}{(}\PYG{n}{APIGatewayProxyRequest} \PYG{n}{request}\PYG{p}{,} \PYG{n}{ILambdaContext} \PYG{n}{context}\PYG{p}{)}
        \PYG{p}{\PYGZob{}}
            \PYG{k}{return}
                \PYG{k}{await} \PYG{n}{Task}\PYG{p}{.}\PYG{n}{Run}\PYG{p}{(()} \PYG{p}{=\PYGZgt{}}
                    \PYG{p}{\PYGZob{}}
                        \PYG{k}{using} \PYG{p}{(}\PYG{k+kt}{var} \PYG{n}{db} \PYG{p}{=} \PYG{k}{new} \PYG{n}{ReVersion\PYGZus{}DatabaseContext}\PYG{p}{())}
                        \PYG{p}{\PYGZob{}}
                            \PYG{k}{if} \PYG{p}{(}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters} \PYG{p}{==} \PYG{k}{null} \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{ContainsKey}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}repositoryId\PYGZdq{}}\PYG{p}{))}
                                \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}

                            \PYG{k+kt}{string} \PYG{n}{repo}\PYG{p}{;}
                            \PYG{k}{if} \PYG{p}{(!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{TryGetValue}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}repositoryId\PYGZdq{}}\PYG{p}{,} \PYG{k}{out} \PYG{n}{repo}\PYG{p}{))}
                                \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}

                            \PYG{k}{if} \PYG{p}{(!}\PYG{n}{RepositoryExists}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{))}
                                \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{NotFound} \PYG{p}{\PYGZcb{};}

                            \PYG{n}{List}\PYG{p}{\PYGZlt{}}\PYG{n}{BranchLookup}\PYG{p}{\PYGZgt{}} \PYG{n}{branches} \PYG{p}{=} \PYG{n}{QueryBranches}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{);}

                            \PYG{n}{List}\PYG{p}{\PYGZlt{}}\PYG{n}{ResourceItem}\PYG{p}{\PYGZgt{}} \PYG{n}{responseObject} \PYG{p}{=}
                                \PYG{p}{(}\PYG{k}{from} \PYG{n}{branch} \PYG{k}{in} \PYG{n}{branches}
                                 \PYG{k}{select} \PYG{k}{new} \PYG{n}{ResourceItem}
                                 \PYG{p}{\PYGZob{}}
                                     \PYG{n}{DisplayData} \PYG{p}{=} \PYG{n}{branch}\PYG{p}{.}\PYG{n}{BranchName}\PYG{p}{,}
                                     \PYG{n}{Href} \PYG{p}{=} \PYG{n}{request}\PYG{p}{.}\PYG{n}{Path} \PYG{p}{+} \PYG{err}{\PYGZdl{}}\PYG{l+s}{\PYGZdq{}/\PYGZob{}branch.BranchName\PYGZcb{}\PYGZdq{}}
                                 \PYG{p}{\PYGZcb{}).}\PYG{n}{ToList}\PYG{p}{();}

                            \PYG{k+kt}{string} \PYG{n}{responseContent} \PYG{p}{=} \PYG{n}{JsonConvert}\PYG{p}{.}\PYG{n}{SerializeObject}\PYG{p}{(}\PYG{k}{new} \PYG{p}{\PYGZob{}} \PYG{n}{Resources} \PYG{p}{=} \PYG{n}{responseObject} \PYG{p}{\PYGZcb{},} \PYG{n}{jsonSerializerSettings}\PYG{p}{);}

                            \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse}
                            \PYG{p}{\PYGZob{}}
                                \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{OK}\PYG{p}{,}
                                \PYG{n}{Body} \PYG{p}{=} \PYG{n}{responseContent}\PYG{p}{,}
                                \PYG{n}{Headers} \PYG{p}{=} \PYG{k}{new} \PYG{n}{Dictionary}\PYG{p}{\PYGZlt{}}\PYG{k+kt}{string}\PYG{p}{,} \PYG{k+kt}{string}\PYG{p}{\PYGZgt{}} \PYG{p}{\PYGZob{}} \PYG{p}{\PYGZob{}} \PYG{l+s}{\PYGZdq{}Content\PYGZhy{}Type\PYGZdq{}}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}application/json\PYGZdq{}} \PYG{p}{\PYGZcb{}} \PYG{p}{\PYGZcb{}}
                            \PYG{p}{\PYGZcb{};}
                        \PYG{p}{\PYGZcb{}}
                    \PYG{p}{\PYGZcb{}}
                \PYG{p}{);}
        \PYG{p}{\PYGZcb{}}

        \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
        \PYG{c+c1}{/// A Lambda function that creates a new branch within the repository}
        \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}request\PYGZdq{}\PYGZgt{}\PYGZlt{}/param\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}\PYGZlt{}/returns\PYGZgt{}}
        \PYG{k}{public} \PYG{k}{async} \PYG{n}{Task}\PYG{p}{\PYGZlt{}}\PYG{n}{APIGatewayProxyResponse}\PYG{p}{\PYGZgt{}} \PYG{n}{CreateBranchAsync}\PYG{p}{(}\PYG{n}{APIGatewayProxyRequest} \PYG{n}{request}\PYG{p}{,} \PYG{n}{ILambdaContext} \PYG{n}{context}\PYG{p}{)}
        \PYG{p}{\PYGZob{}}
            \PYG{k}{using} \PYG{p}{(}\PYG{k+kt}{var} \PYG{n}{db} \PYG{p}{=} \PYG{k}{new} \PYG{n}{ReVersion\PYGZus{}DatabaseContext}\PYG{p}{())}
            \PYG{p}{\PYGZob{}}
                \PYG{n}{s3Ops} \PYG{p}{=} \PYG{k}{new} \PYG{n}{S3Operations}\PYG{p}{(}\PYG{n}{Environment}\PYG{p}{.}\PYG{n}{GetEnvironmentVariable}\PYG{p}{(}\PYG{n}{S3\PYGZus{}REGION\PYGZus{}ENVIRONMENT\PYGZus{}VARIABLE\PYGZus{}LOOKUP}\PYG{p}{));}
                \PYG{k}{if} \PYG{p}{(}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters} \PYG{p}{==} \PYG{k}{null} \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{ContainsKey}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}repositoryId\PYGZdq{}}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}

                \PYG{k+kt}{string} \PYG{n}{repo}\PYG{p}{;}
                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{TryGetValue}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}repositoryId\PYGZdq{}}\PYG{p}{,} \PYG{k}{out} \PYG{n}{repo}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}

                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{RepositoryExists}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{NotFound} \PYG{p}{\PYGZcb{};}

                \PYG{n}{NewBranchData} \PYG{n}{requestBody}\PYG{p}{;}
                \PYG{k}{try}
                \PYG{p}{\PYGZob{}}
                    \PYG{n}{requestBody} \PYG{p}{=} \PYG{n}{JsonConvert}\PYG{p}{.}\PYG{n}{DeserializeObject}\PYG{p}{\PYGZlt{}}\PYG{n}{NewBranchData}\PYG{p}{\PYGZgt{}(}\PYG{n}{request}\PYG{p}{.}\PYG{n}{Body}\PYG{p}{);}
                \PYG{p}{\PYGZcb{}}
                \PYG{k}{catch} \PYG{p}{(}\PYG{n}{Exception}\PYG{p}{)}
                \PYG{p}{\PYGZob{}}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}
                \PYG{p}{\PYGZcb{}}

                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{UsernameExists}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{UserName}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{BadRequest} \PYG{p}{\PYGZcb{};}

                \PYG{k}{if} \PYG{p}{(}\PYG{n}{BranchExists}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{BranchId}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{Conflict} \PYG{p}{\PYGZcb{};}

                \PYG{n}{InsertIntoBranchTable}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{BranchId}\PYG{p}{);}
                \PYG{k}{await} \PYG{n}{s3Ops}\PYG{p}{.}\PYG{n}{CreateS3BucketAsync}\PYG{p}{(}\PYG{n}{repo}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{BranchId}\PYG{p}{);}
                \PYG{n}{InsertIntoEventLog}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{BranchId}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{UserName}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{Message}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}create\PYGZus{}branch\PYGZdq{}}\PYG{p}{);}

                \PYG{k+kt}{var} \PYG{n}{responseObject} \PYG{p}{=} \PYG{k}{new} \PYG{n}{ResourceItem}
                \PYG{p}{\PYGZob{}}
                    \PYG{n}{DisplayData} \PYG{p}{=} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{BranchId}\PYG{p}{,}
                    \PYG{n}{Href} \PYG{p}{=} \PYG{n}{request}\PYG{p}{.}\PYG{n}{Path} \PYG{p}{+} \PYG{err}{\PYGZdl{}}\PYG{l+s}{\PYGZdq{}/\PYGZob{}requestBody.BranchId\PYGZcb{}\PYGZdq{}}
                \PYG{p}{\PYGZcb{};}

                \PYG{k+kt}{var} \PYG{n}{responseContent} \PYG{p}{=} \PYG{n}{JsonConvert}\PYG{p}{.}\PYG{n}{SerializeObject}\PYG{p}{(}\PYG{n}{responseObject}\PYG{p}{);}

                \PYG{k}{await} \PYG{n}{db}\PYG{p}{.}\PYG{n}{SaveChangesAsync}\PYG{p}{();}
                \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse}
                \PYG{p}{\PYGZob{}}
                    \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{Created}\PYG{p}{,}
                    \PYG{n}{Headers} \PYG{p}{=} \PYG{k}{new} \PYG{n}{Dictionary}\PYG{p}{\PYGZlt{}}\PYG{k+kt}{string}\PYG{p}{,} \PYG{k+kt}{string}\PYG{p}{\PYGZgt{}} \PYG{p}{\PYGZob{}} \PYG{p}{\PYGZob{}} \PYG{l+s}{\PYGZdq{}Content\PYGZhy{}Type\PYGZdq{}}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}application/json\PYGZdq{}} \PYG{p}{\PYGZcb{}} \PYG{p}{\PYGZcb{},}
                    \PYG{n}{Body} \PYG{p}{=} \PYG{n}{responseContent}
                \PYG{p}{\PYGZcb{};}
            \PYG{p}{\PYGZcb{}}
        \PYG{p}{\PYGZcb{}}

        \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
        \PYG{c+c1}{/// A Lambda function that gets a list of all of the objects within a branch}
        \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}request\PYGZdq{}\PYGZgt{}\PYGZlt{}/param\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}\PYGZlt{}/returns\PYGZgt{}}
        \PYG{k}{public} \PYG{k}{async} \PYG{n}{Task}\PYG{p}{\PYGZlt{}}\PYG{n}{APIGatewayProxyResponse}\PYG{p}{\PYGZgt{}} \PYG{n}{GetBranchAsync}\PYG{p}{(}\PYG{n}{APIGatewayProxyRequest} \PYG{n}{request}\PYG{p}{,} \PYG{n}{ILambdaContext} \PYG{n}{context}\PYG{p}{)}
        \PYG{p}{\PYGZob{}}
            \PYG{k}{return}
                \PYG{k}{await} \PYG{n}{Task}\PYG{p}{.}\PYG{n}{Run}\PYG{p}{(()} \PYG{p}{=\PYGZgt{}}
                \PYG{p}{\PYGZob{}}
                    \PYG{k}{using} \PYG{p}{(}\PYG{k+kt}{var} \PYG{n}{db} \PYG{p}{=} \PYG{k}{new} \PYG{n}{ReVersion\PYGZus{}DatabaseContext}\PYG{p}{())}
                    \PYG{p}{\PYGZob{}}
                        \PYG{n}{context}\PYG{p}{.}\PYG{n}{Logger}\PYG{p}{.}\PYG{n}{Log}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}start of GetBranchAsync function\PYGZdq{}}\PYG{p}{);}
                        \PYG{k}{if} \PYG{p}{(}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters} \PYG{p}{==} \PYG{k}{null} \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{ContainsKey}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}repositoryId\PYGZdq{}}\PYG{p}{)}
                            \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{ContainsKey}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}branchId\PYGZdq{}}\PYG{p}{))}
                            \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse}
                            \PYG{p}{\PYGZob{}}
                                \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError}\PYG{p}{,}
                                \PYG{n}{Body} \PYG{p}{=} \PYG{l+s}{\PYGZdq{}path parameters are empty or missing repositoryId or branchId\PYGZdq{}}
                            \PYG{p}{\PYGZcb{};}

                        \PYG{n}{context}\PYG{p}{.}\PYG{n}{Logger}\PYG{p}{.}\PYG{n}{Log}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}Passed the first check repositoryId and branchId exist\PYGZdq{}}\PYG{p}{);}

                        \PYG{k+kt}{string} \PYG{n}{repo}\PYG{p}{;}
                        \PYG{k+kt}{string} \PYG{n}{branch}\PYG{p}{;}
                        \PYG{k}{if} \PYG{p}{(!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{TryGetValue}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}repositoryId\PYGZdq{}}\PYG{p}{,} \PYG{k}{out} \PYG{n}{repo}\PYG{p}{)}
                            \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{TryGetValue}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}branchId\PYGZdq{}}\PYG{p}{,} \PYG{k}{out} \PYG{n}{branch}\PYG{p}{))}
                            \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse}
                            \PYG{p}{\PYGZob{}}
                                \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError}\PYG{p}{,}
                                \PYG{n}{Body} \PYG{p}{=} \PYG{l+s}{\PYGZdq{}missing repositoryId or branchId in the second check\PYGZdq{}}
                            \PYG{p}{\PYGZcb{};}

                        \PYG{n}{context}\PYG{p}{.}\PYG{n}{Logger}\PYG{p}{.}\PYG{n}{Log}\PYG{p}{(}\PYG{err}{\PYGZdl{}}\PYG{l+s}{\PYGZdq{}Passed the second check. repositoryId = \PYGZob{}repo\PYGZcb{} and branchId = \PYGZob{}branch\PYGZcb{}\PYGZdq{}}\PYG{p}{);}

                        \PYG{k}{if} \PYG{p}{(!}\PYG{n}{BranchExists}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{branch}\PYG{p}{))}
                            \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse}
                            \PYG{p}{\PYGZob{}}
                                \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{NotFound}\PYG{p}{,}
                                \PYG{n}{Body} \PYG{p}{=} \PYG{err}{\PYGZdl{}}\PYG{l+s}{\PYGZdq{}Branch does not exist for branch = \PYGZob{}branch\PYGZcb{} and repository = \PYGZob{}repo\PYGZcb{}\PYGZdq{}}
                            \PYG{p}{\PYGZcb{};}

                        \PYG{n}{context}\PYG{p}{.}\PYG{n}{Logger}\PYG{p}{.}\PYG{n}{Log}\PYG{p}{(}\PYG{err}{\PYGZdl{}}\PYG{l+s}{\PYGZdq{}Determined that branch exists for repository \PYGZob{}repo\PYGZcb{} and branch \PYGZob{}branch\PYGZcb{}\PYGZdq{}}\PYG{p}{);}

                        \PYG{n}{HierarchyNode} \PYG{n}{branchFiles} \PYG{p}{=} \PYG{n}{QueryHierarchy}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{branch}\PYG{p}{);}

                        \PYG{n}{context}\PYG{p}{.}\PYG{n}{Logger}\PYG{p}{.}\PYG{n}{Log}\PYG{p}{(}\PYG{err}{\PYGZdl{}}\PYG{l+s}{\PYGZdq{}Successfully queried branch hierarchy from repository \PYGZob{}repo\PYGZcb{} and branch \PYGZob{}branch\PYGZcb{}\PYGZdq{}}\PYG{p}{);}

                        \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse}
                        \PYG{p}{\PYGZob{}}
                            \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{OK}\PYG{p}{,}
                            \PYG{n}{Body} \PYG{p}{=} \PYG{n}{JsonConvert}\PYG{p}{.}\PYG{n}{SerializeObject}\PYG{p}{(}\PYG{n}{branchFiles}\PYG{p}{),}
                            \PYG{n}{Headers} \PYG{p}{=} \PYG{k}{new} \PYG{n}{Dictionary}\PYG{p}{\PYGZlt{}}\PYG{k+kt}{string}\PYG{p}{,} \PYG{k+kt}{string}\PYG{p}{\PYGZgt{}} \PYG{p}{\PYGZob{}} \PYG{p}{\PYGZob{}} \PYG{l+s}{\PYGZdq{}Content\PYGZhy{}Type\PYGZdq{}}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}application/json\PYGZdq{}} \PYG{p}{\PYGZcb{}} \PYG{p}{\PYGZcb{}}
                        \PYG{p}{\PYGZcb{};}
                    \PYG{p}{\PYGZcb{}}
                \PYG{p}{\PYGZcb{});}
        \PYG{p}{\PYGZcb{}}

        \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
        \PYG{c+c1}{/// A Lambda function that commits all local changes to a branch}
        \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}request\PYGZdq{}\PYGZgt{}\PYGZlt{}/param\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}\PYGZlt{}/returns\PYGZgt{}}
        \PYG{k}{public} \PYG{k}{async} \PYG{n}{Task}\PYG{p}{\PYGZlt{}}\PYG{n}{APIGatewayProxyResponse}\PYG{p}{\PYGZgt{}} \PYG{n}{CommitChangesAsync}\PYG{p}{(}\PYG{n}{APIGatewayProxyRequest} \PYG{n}{request}\PYG{p}{,} \PYG{n}{ILambdaContext} \PYG{n}{context}\PYG{p}{)}
        \PYG{p}{\PYGZob{}}
            \PYG{k}{return} \PYG{k}{await} \PYG{n}{Task}\PYG{p}{.}\PYG{n}{Run}\PYG{p}{(()} \PYG{p}{=\PYGZgt{}}
            \PYG{p}{\PYGZob{}}
                \PYG{n}{s3Ops} \PYG{p}{=} \PYG{k}{new} \PYG{n}{S3Operations}\PYG{p}{(}\PYG{n}{Environment}\PYG{p}{.}\PYG{n}{GetEnvironmentVariable}\PYG{p}{(}\PYG{n}{S3\PYGZus{}REGION\PYGZus{}ENVIRONMENT\PYGZus{}VARIABLE\PYGZus{}LOOKUP}\PYG{p}{));}

                \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}
            \PYG{p}{\PYGZcb{});}
            \PYG{c+c1}{// TODO}
            \PYG{c+c1}{//throw new NotImplementedException();}
        \PYG{p}{\PYGZcb{}}

        \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
        \PYG{c+c1}{/// A Lambda function that gets a file within a branch}
        \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}request\PYGZdq{}\PYGZgt{}\PYGZlt{}/param\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}\PYGZlt{}/returns\PYGZgt{}}
        \PYG{k}{public} \PYG{k}{async} \PYG{n}{Task}\PYG{p}{\PYGZlt{}}\PYG{n}{APIGatewayProxyResponse}\PYG{p}{\PYGZgt{}} \PYG{n}{GetObjectAsync}\PYG{p}{(}\PYG{n}{APIGatewayProxyRequest} \PYG{n}{request}\PYG{p}{,} \PYG{n}{ILambdaContext} \PYG{n}{context}\PYG{p}{)}
        \PYG{p}{\PYGZob{}}
            \PYG{k}{using} \PYG{p}{(}\PYG{k+kt}{var} \PYG{n}{db} \PYG{p}{=} \PYG{k}{new} \PYG{n}{ReVersion\PYGZus{}DatabaseContext}\PYG{p}{())}
            \PYG{p}{\PYGZob{}}
                \PYG{n}{s3Ops} \PYG{p}{=} \PYG{k}{new} \PYG{n}{S3Operations}\PYG{p}{(}\PYG{n}{Environment}\PYG{p}{.}\PYG{n}{GetEnvironmentVariable}\PYG{p}{(}\PYG{n}{S3\PYGZus{}REGION\PYGZus{}ENVIRONMENT\PYGZus{}VARIABLE\PYGZus{}LOOKUP}\PYG{p}{));}

                \PYG{k}{if} \PYG{p}{(}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters} \PYG{p}{==} \PYG{k}{null} \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{ContainsKey}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}repositoryId\PYGZdq{}}\PYG{p}{)}
                    \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{ContainsKey}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}branchId\PYGZdq{}}\PYG{p}{)}
                    \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{QueryStringParameters}\PYG{p}{.}\PYG{n}{ContainsKey}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}awsObjectKey\PYGZdq{}}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}
                \PYG{k+kt}{string} \PYG{n}{repo}\PYG{p}{;}
                \PYG{k+kt}{string} \PYG{n}{branch}\PYG{p}{;}
                \PYG{k+kt}{string} \PYG{n}{objectKey}\PYG{p}{;}
                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{TryGetValue}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}repositoryId\PYGZdq{}}\PYG{p}{,} \PYG{k}{out} \PYG{n}{repo}\PYG{p}{)}
                    \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{TryGetValue}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}branchId\PYGZdq{}}\PYG{p}{,} \PYG{k}{out} \PYG{n}{branch}\PYG{p}{)}
                    \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{TryGetValue}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}awsObjectKey\PYGZdq{}}\PYG{p}{,} \PYG{k}{out} \PYG{n}{objectKey}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}

                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{BranchExists}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{branch}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{NotFound} \PYG{p}{\PYGZcb{};}

                \PYG{k+kt}{string} \PYG{n}{responseContent} \PYG{p}{=} \PYG{k}{await} \PYG{n}{s3Ops}\PYG{p}{.}\PYG{n}{GetTextFromObjectAsync}\PYG{p}{(}\PYG{n}{repo}\PYG{p}{,} \PYG{n}{branch}\PYG{p}{,} \PYG{n}{objectKey}\PYG{p}{);}

                \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse}
                \PYG{p}{\PYGZob{}}
                    \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{OK}\PYG{p}{,}
                    \PYG{n}{Body} \PYG{p}{=} \PYG{n}{responseContent}\PYG{p}{,}
                    \PYG{n}{Headers} \PYG{p}{=} \PYG{k}{new} \PYG{n}{Dictionary}\PYG{p}{\PYGZlt{}}\PYG{k+kt}{string}\PYG{p}{,} \PYG{k+kt}{string}\PYG{p}{\PYGZgt{}} \PYG{p}{\PYGZob{}} \PYG{p}{\PYGZob{}} \PYG{l+s}{\PYGZdq{}Content\PYGZhy{}Type\PYGZdq{}}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}text/plain\PYGZdq{}} \PYG{p}{\PYGZcb{}} \PYG{p}{\PYGZcb{}}
                \PYG{p}{\PYGZcb{};}
            \PYG{p}{\PYGZcb{}}
        \PYG{p}{\PYGZcb{}}

        \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
        \PYG{c+c1}{/// A Lambda function that gets a list of all of the versions within a branch}
        \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}request\PYGZdq{}\PYGZgt{}\PYGZlt{}/param\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}\PYGZlt{}/returns\PYGZgt{}}
        \PYG{k}{public} \PYG{k}{async} \PYG{n}{Task}\PYG{p}{\PYGZlt{}}\PYG{n}{APIGatewayProxyResponse}\PYG{p}{\PYGZgt{}} \PYG{n}{GetVersionsAsync}\PYG{p}{(}\PYG{n}{APIGatewayProxyRequest} \PYG{n}{request}\PYG{p}{,} \PYG{n}{ILambdaContext} \PYG{n}{context}\PYG{p}{)}
        \PYG{p}{\PYGZob{}}
            \PYG{k}{return} \PYG{k}{await} \PYG{n}{Task}\PYG{p}{.}\PYG{n}{Run}\PYG{p}{(()} \PYG{p}{=\PYGZgt{}}
            \PYG{p}{\PYGZob{}}
                \PYG{k}{using} \PYG{p}{(}\PYG{k+kt}{var} \PYG{n}{db} \PYG{p}{=} \PYG{k}{new} \PYG{n}{ReVersion\PYGZus{}DatabaseContext}\PYG{p}{())}
                \PYG{p}{\PYGZob{}}
                    \PYG{k}{if} \PYG{p}{(}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters} \PYG{p}{==} \PYG{k}{null} \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{ContainsKey}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}repositoryId\PYGZdq{}}\PYG{p}{)}
                        \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{ContainsKey}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}branchId\PYGZdq{}}\PYG{p}{)}
                        \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{QueryStringParameters}\PYG{p}{.}\PYG{n}{ContainsKey}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}awsObjectKey\PYGZdq{}}\PYG{p}{))}
                        \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}
                    \PYG{k+kt}{string} \PYG{n}{repo}\PYG{p}{;}
                    \PYG{k+kt}{string} \PYG{n}{branch}\PYG{p}{;}
                    \PYG{k}{if} \PYG{p}{(!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{TryGetValue}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}repositoryId\PYGZdq{}}\PYG{p}{,} \PYG{k}{out} \PYG{n}{repo}\PYG{p}{)}
                        \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{TryGetValue}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}branchId\PYGZdq{}}\PYG{p}{,} \PYG{k}{out} \PYG{n}{branch}\PYG{p}{))}
                        \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}

                    \PYG{k}{if} \PYG{p}{(!}\PYG{n}{BranchExists}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{branch}\PYG{p}{))}
                        \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{NotFound} \PYG{p}{\PYGZcb{};}

                    \PYG{k+kt}{var} \PYG{n}{versionList} \PYG{p}{=} \PYG{n}{QueryVersions}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{branch}\PYG{p}{);}
                    \PYG{n}{List}\PYG{p}{\PYGZlt{}}\PYG{n}{ResourceItem}\PYG{p}{\PYGZgt{}} \PYG{n}{responseContent} \PYG{p}{=}
                        \PYG{n}{versionList}\PYG{p}{.}\PYG{n}{Select}\PYG{p}{(}\PYG{n}{x} \PYG{p}{=\PYGZgt{}} \PYG{k}{new} \PYG{n}{ResourceItem}
                        \PYG{p}{\PYGZob{}}
                            \PYG{n}{DisplayData} \PYG{p}{=} \PYG{err}{\PYGZdl{}}\PYG{l+s}{\PYGZdq{}\PYGZob{}x\PYGZcb{}\PYGZdq{}}\PYG{p}{,}
                            \PYG{n}{Href} \PYG{p}{=} \PYG{err}{\PYGZdl{}}\PYG{l+s}{\PYGZdq{}\PYGZob{}request.Path\PYGZcb{}/\PYGZob{}x\PYGZcb{}\PYGZdq{}}
                        \PYG{p}{\PYGZcb{}).}\PYG{n}{ToList}\PYG{p}{();}

                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse}
                    \PYG{p}{\PYGZob{}}
                        \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{OK}\PYG{p}{,}
                        \PYG{n}{Body} \PYG{p}{=} \PYG{n}{JsonConvert}\PYG{p}{.}\PYG{n}{SerializeObject}\PYG{p}{(}\PYG{k}{new} \PYG{p}{\PYGZob{}} \PYG{n}{Resources} \PYG{p}{=} \PYG{n}{responseContent} \PYG{p}{\PYGZcb{}),}
                        \PYG{n}{Headers} \PYG{p}{=} \PYG{k}{new} \PYG{n}{Dictionary}\PYG{p}{\PYGZlt{}}\PYG{k+kt}{string}\PYG{p}{,} \PYG{k+kt}{string}\PYG{p}{\PYGZgt{}} \PYG{p}{\PYGZob{}} \PYG{p}{\PYGZob{}} \PYG{l+s}{\PYGZdq{}Content\PYGZhy{}Type\PYGZdq{}}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}application/json\PYGZdq{}} \PYG{p}{\PYGZcb{}} \PYG{p}{\PYGZcb{}}
                    \PYG{p}{\PYGZcb{};}
                \PYG{p}{\PYGZcb{}}
            \PYG{p}{\PYGZcb{});}
        \PYG{p}{\PYGZcb{}}

        \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
        \PYG{c+c1}{/// A Lambda function that gets a list of all of the files within a version of a branch}
        \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}request\PYGZdq{}\PYGZgt{}\PYGZlt{}/param\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}\PYGZlt{}/returns\PYGZgt{}}
        \PYG{k}{public} \PYG{k}{async} \PYG{n}{Task}\PYG{p}{\PYGZlt{}}\PYG{n}{APIGatewayProxyResponse}\PYG{p}{\PYGZgt{}} \PYG{n}{GetVersionAsync}\PYG{p}{(}\PYG{n}{APIGatewayProxyRequest} \PYG{n}{request}\PYG{p}{,} \PYG{n}{ILambdaContext} \PYG{n}{context}\PYG{p}{)}
        \PYG{p}{\PYGZob{}}
            \PYG{k}{return} \PYG{k}{await} \PYG{n}{Task}\PYG{p}{.}\PYG{n}{Run}\PYG{p}{(()} \PYG{p}{=\PYGZgt{}}
            \PYG{p}{\PYGZob{}}
                \PYG{k}{using} \PYG{p}{(}\PYG{k+kt}{var} \PYG{n}{db} \PYG{p}{=} \PYG{k}{new} \PYG{n}{ReVersion\PYGZus{}DatabaseContext}\PYG{p}{())}
                \PYG{p}{\PYGZob{}}
                    \PYG{k}{if} \PYG{p}{(}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters} \PYG{p}{==} \PYG{k}{null} \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{ContainsKey}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}repositoryId\PYGZdq{}}\PYG{p}{)}
                        \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{ContainsKey}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}branchId\PYGZdq{}}\PYG{p}{)}
                        \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{QueryStringParameters}\PYG{p}{.}\PYG{n}{ContainsKey}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}versionId\PYGZdq{}}\PYG{p}{))}
                        \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}
                    \PYG{k+kt}{string} \PYG{n}{repo}\PYG{p}{;}
                    \PYG{k+kt}{string} \PYG{n}{branch}\PYG{p}{;}
                    \PYG{k+kt}{string} \PYG{n}{version}\PYG{p}{;}
                    \PYG{k}{if} \PYG{p}{(!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{TryGetValue}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}repositoryId\PYGZdq{}}\PYG{p}{,} \PYG{k}{out} \PYG{n}{repo}\PYG{p}{)}
                        \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{TryGetValue}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}branchId\PYGZdq{}}\PYG{p}{,} \PYG{k}{out} \PYG{n}{branch}\PYG{p}{)}
                        \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{TryGetValue}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}versionId\PYGZdq{}}\PYG{p}{,} \PYG{k}{out} \PYG{n}{version}\PYG{p}{))}
                        \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}

                    \PYG{k}{if} \PYG{p}{(!}\PYG{n}{VersionExists}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{branch}\PYG{p}{,} \PYG{n}{version}\PYG{p}{))}
                        \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{NotFound} \PYG{p}{\PYGZcb{};}

                    \PYG{n}{HierarchyNode} \PYG{n}{versionFiles} \PYG{p}{=} \PYG{n}{QueryHierarchy}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{branch}\PYG{p}{,} \PYG{n}{version}\PYG{p}{);}

                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse}
                    \PYG{p}{\PYGZob{}}
                        \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{OK}\PYG{p}{,}
                        \PYG{n}{Body} \PYG{p}{=} \PYG{n}{JsonConvert}\PYG{p}{.}\PYG{n}{SerializeObject}\PYG{p}{(}\PYG{n}{versionFiles}\PYG{p}{),}
                        \PYG{n}{Headers} \PYG{p}{=} \PYG{k}{new} \PYG{n}{Dictionary}\PYG{p}{\PYGZlt{}}\PYG{k+kt}{string}\PYG{p}{,} \PYG{k+kt}{string}\PYG{p}{\PYGZgt{}} \PYG{p}{\PYGZob{}} \PYG{p}{\PYGZob{}} \PYG{l+s}{\PYGZdq{}Content\PYGZhy{}Type\PYGZdq{}}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}application/json\PYGZdq{}} \PYG{p}{\PYGZcb{}} \PYG{p}{\PYGZcb{}}
                    \PYG{p}{\PYGZcb{};}
                \PYG{p}{\PYGZcb{}}
            \PYG{p}{\PYGZcb{});}
        \PYG{p}{\PYGZcb{}}

        \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
        \PYG{c+c1}{/// A Lambda function that gets a file from a non\PYGZhy{}current version of a branch}
        \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}request\PYGZdq{}\PYGZgt{}\PYGZlt{}/param\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}\PYGZlt{}/returns\PYGZgt{}}
        \PYG{k}{public} \PYG{k}{async} \PYG{n}{Task}\PYG{p}{\PYGZlt{}}\PYG{n}{APIGatewayProxyResponse}\PYG{p}{\PYGZgt{}} \PYG{n}{GetPastObjectAsync}\PYG{p}{(}\PYG{n}{APIGatewayProxyRequest} \PYG{n}{request}\PYG{p}{,} \PYG{n}{ILambdaContext} \PYG{n}{context}\PYG{p}{)}
        \PYG{p}{\PYGZob{}}
            \PYG{k}{return} \PYG{k}{await} \PYG{n}{Task}\PYG{p}{.}\PYG{n}{Run}\PYG{p}{(()} \PYG{p}{=\PYGZgt{}}
            \PYG{p}{\PYGZob{}}
                \PYG{n}{s3Ops} \PYG{p}{=} \PYG{k}{new} \PYG{n}{S3Operations}\PYG{p}{(}\PYG{n}{Environment}\PYG{p}{.}\PYG{n}{GetEnvironmentVariable}\PYG{p}{(}\PYG{n}{S3\PYGZus{}REGION\PYGZus{}ENVIRONMENT\PYGZus{}VARIABLE\PYGZus{}LOOKUP}\PYG{p}{));}
                \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}
            \PYG{p}{\PYGZcb{});}
            \PYG{c+c1}{// TODO}
            \PYG{c+c1}{//throw new NotImplementedException();}
        \PYG{p}{\PYGZcb{}}

        \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
        \PYG{c+c1}{/// A Lambda function that merges a branch with its parent}
        \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}request\PYGZdq{}\PYGZgt{}\PYGZlt{}/param\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}\PYGZlt{}/returns\PYGZgt{}}
        \PYG{k}{public} \PYG{k}{async} \PYG{n}{Task}\PYG{p}{\PYGZlt{}}\PYG{n}{APIGatewayProxyResponse}\PYG{p}{\PYGZgt{}} \PYG{n}{MergeBranchAsync}\PYG{p}{(}\PYG{n}{APIGatewayProxyRequest} \PYG{n}{request}\PYG{p}{,} \PYG{n}{ILambdaContext} \PYG{n}{context}\PYG{p}{)}
        \PYG{p}{\PYGZob{}}
            \PYG{k}{return} \PYG{k}{await} \PYG{n}{Task}\PYG{p}{.}\PYG{n}{Run}\PYG{p}{(()} \PYG{p}{=\PYGZgt{}}
            \PYG{p}{\PYGZob{}}
                \PYG{n}{s3Ops} \PYG{p}{=} \PYG{k}{new} \PYG{n}{S3Operations}\PYG{p}{(}\PYG{n}{Environment}\PYG{p}{.}\PYG{n}{GetEnvironmentVariable}\PYG{p}{(}\PYG{n}{S3\PYGZus{}REGION\PYGZus{}ENVIRONMENT\PYGZus{}VARIABLE\PYGZus{}LOOKUP}\PYG{p}{));}
                \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}
            \PYG{p}{\PYGZcb{});}
            \PYG{c+c1}{// TODO}
            \PYG{c+c1}{//throw new NotImplementedException();}
        \PYG{p}{\PYGZcb{}}

        \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
        \PYG{c+c1}{/// A Lambda function that places a lock on a branch}
        \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}request\PYGZdq{}\PYGZgt{}\PYGZlt{}/param\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}\PYGZlt{}/returns\PYGZgt{}}
        \PYG{k}{public} \PYG{k}{async} \PYG{n}{Task}\PYG{p}{\PYGZlt{}}\PYG{n}{APIGatewayProxyResponse}\PYG{p}{\PYGZgt{}} \PYG{n}{LockBranchAsync}\PYG{p}{(}\PYG{n}{APIGatewayProxyRequest} \PYG{n}{request}\PYG{p}{,} \PYG{n}{ILambdaContext} \PYG{n}{context}\PYG{p}{)}
        \PYG{p}{\PYGZob{}}
            \PYG{k}{using} \PYG{p}{(}\PYG{k+kt}{var} \PYG{n}{db} \PYG{p}{=} \PYG{k}{new} \PYG{n}{ReVersion\PYGZus{}DatabaseContext}\PYG{p}{())}
            \PYG{p}{\PYGZob{}}
                \PYG{k}{if} \PYG{p}{(}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters} \PYG{p}{==} \PYG{k}{null} \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{ContainsKey}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}repositoryId\PYGZdq{}}\PYG{p}{)}
                    \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{ContainsKey}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}branchId\PYGZdq{}}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}

                \PYG{k+kt}{string} \PYG{n}{repo}\PYG{p}{;}
                \PYG{k+kt}{string} \PYG{n}{branch}\PYG{p}{;}

                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{TryGetValue}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}repositoryId\PYGZdq{}}\PYG{p}{,} \PYG{k}{out} \PYG{n}{repo}\PYG{p}{)}
                    \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{TryGetValue}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}branchId\PYGZdq{}}\PYG{p}{,} \PYG{k}{out} \PYG{n}{branch}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}

                \PYG{n}{LogData} \PYG{n}{requestBody}\PYG{p}{;}
                \PYG{k}{try}
                \PYG{p}{\PYGZob{}}
                    \PYG{n}{requestBody} \PYG{p}{=} \PYG{n}{JsonConvert}\PYG{p}{.}\PYG{n}{DeserializeObject}\PYG{p}{\PYGZlt{}}\PYG{n}{LogData}\PYG{p}{\PYGZgt{}(}\PYG{n}{request}\PYG{p}{.}\PYG{n}{Body}\PYG{p}{);}
                \PYG{p}{\PYGZcb{}}
                \PYG{k}{catch} \PYG{p}{(}\PYG{n}{Exception}\PYG{p}{)}
                \PYG{p}{\PYGZob{}}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}
                \PYG{p}{\PYGZcb{}}

                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{UsernameExists}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{UserName}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{BadRequest} \PYG{p}{\PYGZcb{};}

                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{BranchExists}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{branch}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{NotFound} \PYG{p}{\PYGZcb{};}

                \PYG{n}{LockState} \PYG{n}{lockState} \PYG{p}{=} \PYG{n}{AcquireLock}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{branch}\PYG{p}{);}

                \PYG{k}{if} \PYG{p}{(}\PYG{n}{lockState} \PYG{p}{==} \PYG{n}{LockState}\PYG{p}{.}\PYG{n}{AlreadyLockedConflict}\PYG{p}{)}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{Conflict} \PYG{p}{\PYGZcb{};}

                \PYG{k}{if} \PYG{p}{(}\PYG{n}{lockState} \PYG{p}{!=} \PYG{n}{LockState}\PYG{p}{.}\PYG{n}{SuccessfulLockOperation}\PYG{p}{)}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}

                \PYG{n}{InsertIntoEventLog}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{branch}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{UserName}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{Message}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}place\PYGZus{}lock\PYGZdq{}}\PYG{p}{);}

                \PYG{n}{LockData} \PYG{n}{responseObject} \PYG{p}{=} \PYG{n}{QueryLockEventByBranch}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{branch}\PYG{p}{);}

                \PYG{k}{await} \PYG{n}{db}\PYG{p}{.}\PYG{n}{SaveChangesAsync}\PYG{p}{();}
                \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse}
                \PYG{p}{\PYGZob{}}
                    \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{OK}\PYG{p}{,}
                    \PYG{n}{Body} \PYG{p}{=} \PYG{n}{JsonConvert}\PYG{p}{.}\PYG{n}{SerializeObject}\PYG{p}{(}\PYG{n}{responseObject}\PYG{p}{),}
                    \PYG{n}{Headers} \PYG{p}{=} \PYG{k}{new} \PYG{n}{Dictionary}\PYG{p}{\PYGZlt{}}\PYG{k+kt}{string}\PYG{p}{,} \PYG{k+kt}{string}\PYG{p}{\PYGZgt{}} \PYG{p}{\PYGZob{}} \PYG{p}{\PYGZob{}} \PYG{l+s}{\PYGZdq{}Content\PYGZhy{}Type\PYGZdq{}}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}application/json\PYGZdq{}} \PYG{p}{\PYGZcb{}} \PYG{p}{\PYGZcb{}}
                \PYG{p}{\PYGZcb{};}
            \PYG{p}{\PYGZcb{}}
        \PYG{p}{\PYGZcb{}}

        \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
        \PYG{c+c1}{/// A Lambda function that \PYGZdq{}safely\PYGZdq{} removes a lock from a branch (only works if the same user set the lock)}
        \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}request\PYGZdq{}\PYGZgt{}\PYGZlt{}/param\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}\PYGZlt{}/returns\PYGZgt{}}
        \PYG{k}{public} \PYG{k}{async} \PYG{n}{Task}\PYG{p}{\PYGZlt{}}\PYG{n}{APIGatewayProxyResponse}\PYG{p}{\PYGZgt{}} \PYG{n}{UnlockBranchAsync}\PYG{p}{(}\PYG{n}{APIGatewayProxyRequest} \PYG{n}{request}\PYG{p}{,} \PYG{n}{ILambdaContext} \PYG{n}{context}\PYG{p}{)}
        \PYG{p}{\PYGZob{}}
            \PYG{k}{using} \PYG{p}{(}\PYG{k+kt}{var} \PYG{n}{db} \PYG{p}{=} \PYG{k}{new} \PYG{n}{ReVersion\PYGZus{}DatabaseContext}\PYG{p}{())}
            \PYG{p}{\PYGZob{}}
                \PYG{k}{if} \PYG{p}{(}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters} \PYG{p}{==} \PYG{k}{null} \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{ContainsKey}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}repositoryId\PYGZdq{}}\PYG{p}{)}
                    \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{ContainsKey}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}branchId\PYGZdq{}}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}

                \PYG{k+kt}{string} \PYG{n}{repo}\PYG{p}{;}
                \PYG{k+kt}{string} \PYG{n}{branch}\PYG{p}{;}

                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{TryGetValue}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}repositoryId\PYGZdq{}}\PYG{p}{,} \PYG{k}{out} \PYG{n}{repo}\PYG{p}{)}
                    \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{TryGetValue}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}branchId\PYGZdq{}}\PYG{p}{,} \PYG{k}{out} \PYG{n}{branch}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}

                \PYG{n}{LogData} \PYG{n}{requestBody}\PYG{p}{;}
                \PYG{k}{try}
                \PYG{p}{\PYGZob{}}
                    \PYG{n}{requestBody} \PYG{p}{=} \PYG{n}{JsonConvert}\PYG{p}{.}\PYG{n}{DeserializeObject}\PYG{p}{\PYGZlt{}}\PYG{n}{LogData}\PYG{p}{\PYGZgt{}(}\PYG{n}{request}\PYG{p}{.}\PYG{n}{Body}\PYG{p}{);}
                \PYG{p}{\PYGZcb{}}
                \PYG{k}{catch} \PYG{p}{(}\PYG{n}{Exception}\PYG{p}{)}
                \PYG{p}{\PYGZob{}}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}
                \PYG{p}{\PYGZcb{}}

                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{UsernameExists}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{UserName}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{BadRequest} \PYG{p}{\PYGZcb{};}

                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{BranchExists}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{branch}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{NotFound} \PYG{p}{\PYGZcb{};}

                \PYG{n}{LockState} \PYG{n}{lockState} \PYG{p}{=} \PYG{n}{SafeReleaseLock}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{branch}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{UserName}\PYG{p}{);}

                \PYG{k}{if} \PYG{p}{(}\PYG{n}{lockState} \PYG{p}{==} \PYG{n}{LockState}\PYG{p}{.}\PYG{n}{AlreadyUnlockedConflict} \PYG{p}{||} \PYG{n}{lockState} \PYG{p}{==} \PYG{n}{LockState}\PYG{p}{.}\PYG{n}{LockedByDifferentUser}\PYG{p}{)}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{Conflict} \PYG{p}{\PYGZcb{};}

                \PYG{k}{if} \PYG{p}{(}\PYG{n}{lockState} \PYG{p}{!=} \PYG{n}{LockState}\PYG{p}{.}\PYG{n}{SuccessfulLockOperation}\PYG{p}{)}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}


                \PYG{n}{InsertIntoEventLog}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{branch}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{UserName}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{Message}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}safely\PYGZus{}remove\PYGZus{}lock\PYGZdq{}}\PYG{p}{);}

                \PYG{n}{LockData} \PYG{n}{responseObject} \PYG{p}{=} \PYG{n}{QueryLockEventByBranch}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{branch}\PYG{p}{);}

                \PYG{k}{await} \PYG{n}{db}\PYG{p}{.}\PYG{n}{SaveChangesAsync}\PYG{p}{();}
                \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse}
                \PYG{p}{\PYGZob{}}
                    \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{OK}\PYG{p}{,}
                    \PYG{n}{Body} \PYG{p}{=} \PYG{n}{JsonConvert}\PYG{p}{.}\PYG{n}{SerializeObject}\PYG{p}{(}\PYG{n}{responseObject}\PYG{p}{),}
                    \PYG{n}{Headers} \PYG{p}{=} \PYG{k}{new} \PYG{n}{Dictionary}\PYG{p}{\PYGZlt{}}\PYG{k+kt}{string}\PYG{p}{,} \PYG{k+kt}{string}\PYG{p}{\PYGZgt{}} \PYG{p}{\PYGZob{}} \PYG{p}{\PYGZob{}} \PYG{l+s}{\PYGZdq{}Content\PYGZhy{}Type\PYGZdq{}}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}application/json\PYGZdq{}} \PYG{p}{\PYGZcb{}} \PYG{p}{\PYGZcb{}}
                \PYG{p}{\PYGZcb{};}
            \PYG{p}{\PYGZcb{}}
        \PYG{p}{\PYGZcb{}}

        \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
        \PYG{c+c1}{/// A Lambda function that \PYGZdq{}unsafely\PYGZdq{} removes a lock from a branch (any user can do this)}
        \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}request\PYGZdq{}\PYGZgt{}\PYGZlt{}/param\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}\PYGZlt{}/returns\PYGZgt{}}
        \PYG{k}{public} \PYG{k}{async} \PYG{n}{Task}\PYG{p}{\PYGZlt{}}\PYG{n}{APIGatewayProxyResponse}\PYG{p}{\PYGZgt{}} \PYG{n}{BreakLockAsync}\PYG{p}{(}\PYG{n}{APIGatewayProxyRequest} \PYG{n}{request}\PYG{p}{,} \PYG{n}{ILambdaContext} \PYG{n}{context}\PYG{p}{)}
        \PYG{p}{\PYGZob{}}
            \PYG{k}{using} \PYG{p}{(}\PYG{k+kt}{var} \PYG{n}{db} \PYG{p}{=} \PYG{k}{new} \PYG{n}{ReVersion\PYGZus{}DatabaseContext}\PYG{p}{())}
            \PYG{p}{\PYGZob{}}
                \PYG{k}{if} \PYG{p}{(}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters} \PYG{p}{==} \PYG{k}{null} \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{ContainsKey}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}repositoryId\PYGZdq{}}\PYG{p}{)}
                    \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{ContainsKey}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}branchId\PYGZdq{}}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}

                \PYG{k+kt}{string} \PYG{n}{repo}\PYG{p}{;}
                \PYG{k+kt}{string} \PYG{n}{branch}\PYG{p}{;}

                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{TryGetValue}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}repositoryId\PYGZdq{}}\PYG{p}{,} \PYG{k}{out} \PYG{n}{repo}\PYG{p}{)}
                    \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{TryGetValue}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}branchId\PYGZdq{}}\PYG{p}{,} \PYG{k}{out} \PYG{n}{branch}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}

                \PYG{n}{LogData} \PYG{n}{requestBody}\PYG{p}{;}
                \PYG{k}{try}
                \PYG{p}{\PYGZob{}}
                    \PYG{n}{requestBody} \PYG{p}{=} \PYG{n}{JsonConvert}\PYG{p}{.}\PYG{n}{DeserializeObject}\PYG{p}{\PYGZlt{}}\PYG{n}{LogData}\PYG{p}{\PYGZgt{}(}\PYG{n}{request}\PYG{p}{.}\PYG{n}{Body}\PYG{p}{);}
                \PYG{p}{\PYGZcb{}}
                \PYG{k}{catch} \PYG{p}{(}\PYG{n}{Exception}\PYG{p}{)}
                \PYG{p}{\PYGZob{}}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}
                \PYG{p}{\PYGZcb{}}

                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{UsernameExists}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{UserName}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{BadRequest} \PYG{p}{\PYGZcb{};}

                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{BranchExists}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{branch}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{NotFound} \PYG{p}{\PYGZcb{};}

                \PYG{n}{LockState} \PYG{n}{lockState} \PYG{p}{=} \PYG{n}{ReleaseLock}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{branch}\PYG{p}{);}

                \PYG{k}{if} \PYG{p}{(}\PYG{n}{lockState} \PYG{p}{==} \PYG{n}{LockState}\PYG{p}{.}\PYG{n}{AlreadyUnlockedConflict}\PYG{p}{)}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{Conflict} \PYG{p}{\PYGZcb{};}

                \PYG{k}{if} \PYG{p}{(}\PYG{n}{lockState} \PYG{p}{!=} \PYG{n}{LockState}\PYG{p}{.}\PYG{n}{SuccessfulLockOperation}\PYG{p}{)}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}


                \PYG{n}{InsertIntoEventLog}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{branch}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{UserName}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{Message}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}force\PYGZus{}remove\PYGZus{}lock\PYGZdq{}}\PYG{p}{);}

                \PYG{n}{LockData} \PYG{n}{responseObject} \PYG{p}{=} \PYG{n}{QueryLockEventByBranch}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{branch}\PYG{p}{);}

                \PYG{k}{await} \PYG{n}{db}\PYG{p}{.}\PYG{n}{SaveChangesAsync}\PYG{p}{();}
                \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse}
                \PYG{p}{\PYGZob{}}
                    \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{OK}\PYG{p}{,}
                    \PYG{n}{Body} \PYG{p}{=} \PYG{n}{JsonConvert}\PYG{p}{.}\PYG{n}{SerializeObject}\PYG{p}{(}\PYG{n}{responseObject}\PYG{p}{),}
                    \PYG{n}{Headers} \PYG{p}{=} \PYG{k}{new} \PYG{n}{Dictionary}\PYG{p}{\PYGZlt{}}\PYG{k+kt}{string}\PYG{p}{,} \PYG{k+kt}{string}\PYG{p}{\PYGZgt{}} \PYG{p}{\PYGZob{}} \PYG{p}{\PYGZob{}} \PYG{l+s}{\PYGZdq{}Content\PYGZhy{}Type\PYGZdq{}}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}application/json\PYGZdq{}} \PYG{p}{\PYGZcb{}} \PYG{p}{\PYGZcb{}}
                \PYG{p}{\PYGZcb{};}
            \PYG{p}{\PYGZcb{}}
        \PYG{p}{\PYGZcb{}}

        \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
        \PYG{c+c1}{/// A Lambda function that requests permission for a user to access a repository}
        \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}request\PYGZdq{}\PYGZgt{}\PYGZlt{}/param\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}\PYGZlt{}/returns\PYGZgt{}}
        \PYG{k}{public} \PYG{k}{async} \PYG{n}{Task}\PYG{p}{\PYGZlt{}}\PYG{n}{APIGatewayProxyResponse}\PYG{p}{\PYGZgt{}} \PYG{n}{RequestPermissionAsync}\PYG{p}{(}\PYG{n}{APIGatewayProxyRequest} \PYG{n}{request}\PYG{p}{,} \PYG{n}{ILambdaContext} \PYG{n}{context}\PYG{p}{)}
        \PYG{p}{\PYGZob{}}
            \PYG{k}{using} \PYG{p}{(}\PYG{k+kt}{var} \PYG{n}{db} \PYG{p}{=} \PYG{k}{new} \PYG{n}{ReVersion\PYGZus{}DatabaseContext}\PYG{p}{())}
            \PYG{p}{\PYGZob{}}
                \PYG{k}{if} \PYG{p}{(}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters} \PYG{p}{==} \PYG{k}{null} \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{ContainsKey}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}repositoryId\PYGZdq{}}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}

                \PYG{k+kt}{string} \PYG{n}{repo}\PYG{p}{;}

                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{TryGetValue}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}repositoryId\PYGZdq{}}\PYG{p}{,} \PYG{k}{out} \PYG{n}{repo}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}

                \PYG{n}{LogData} \PYG{n}{requestBody}\PYG{p}{;}
                \PYG{k}{try}
                \PYG{p}{\PYGZob{}}
                    \PYG{n}{requestBody} \PYG{p}{=} \PYG{n}{JsonConvert}\PYG{p}{.}\PYG{n}{DeserializeObject}\PYG{p}{\PYGZlt{}}\PYG{n}{LogData}\PYG{p}{\PYGZgt{}(}\PYG{n}{request}\PYG{p}{.}\PYG{n}{Body}\PYG{p}{);}
                \PYG{p}{\PYGZcb{}}
                \PYG{k}{catch} \PYG{p}{(}\PYG{n}{Exception}\PYG{p}{)}
                \PYG{p}{\PYGZob{}}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}
                \PYG{p}{\PYGZcb{}}

                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{UsernameExists}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{UserName}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{BadRequest} \PYG{p}{\PYGZcb{};}

                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{RepositoryExists}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{NotFound} \PYG{p}{\PYGZcb{};}

                \PYG{k}{if} \PYG{p}{(}\PYG{n}{UserCanAccessRepository}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{UserName}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{Conflict} \PYG{p}{\PYGZcb{};}

                \PYG{k}{if} \PYG{p}{(}\PYG{n}{PermissionRequestIsLogged}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{UserName}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{NoContent} \PYG{p}{\PYGZcb{};}

                \PYG{n}{InsertIntoEventLog}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}main\PYGZdq{}}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{UserName}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{Message}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}request\PYGZus{}permission\PYGZdq{}}\PYG{p}{);}
                \PYG{k+kt}{int} \PYG{n}{eventId} \PYG{p}{=} \PYG{n}{QueryLastEventIdByUser}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{UserName}\PYG{p}{);}

                \PYG{n}{InsertIntoPermissionRequestTable}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{eventId}\PYG{p}{);}

                \PYG{k}{await} \PYG{n}{db}\PYG{p}{.}\PYG{n}{SaveChangesAsync}\PYG{p}{();}
                \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse}
                \PYG{p}{\PYGZob{}}
                    \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{NoContent}\PYG{p}{,}
                    \PYG{n}{Headers} \PYG{p}{=} \PYG{k}{new} \PYG{n}{Dictionary}\PYG{p}{\PYGZlt{}}\PYG{k+kt}{string}\PYG{p}{,} \PYG{k+kt}{string}\PYG{p}{\PYGZgt{}} \PYG{p}{\PYGZob{}} \PYG{p}{\PYGZob{}} \PYG{l+s}{\PYGZdq{}Content\PYGZhy{}Type\PYGZdq{}}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}application/json\PYGZdq{}} \PYG{p}{\PYGZcb{}} \PYG{p}{\PYGZcb{}}
                \PYG{p}{\PYGZcb{};}
            \PYG{p}{\PYGZcb{}}
        \PYG{p}{\PYGZcb{}}


        \PYG{c+c1}{// TODO: in the client\PYGZhy{}side, you need to remember to add /grant and /deny to all of the resource URLs!!!}

        \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
        \PYG{c+c1}{/// A Lambda function that gets a list of all of the unanswered permission requests submitted}
        \PYG{c+c1}{/// to access all of the repositories owned by a user}
        \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}request\PYGZdq{}\PYGZgt{}\PYGZlt{}/param\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}\PYGZlt{}/returns\PYGZgt{}}
        \PYG{k}{public} \PYG{k}{async} \PYG{n}{Task}\PYG{p}{\PYGZlt{}}\PYG{n}{APIGatewayProxyResponse}\PYG{p}{\PYGZgt{}} \PYG{n}{GetPermissionRequestsAsync}\PYG{p}{(}\PYG{n}{APIGatewayProxyRequest} \PYG{n}{request}\PYG{p}{,} \PYG{n}{ILambdaContext} \PYG{n}{context}\PYG{p}{)}
        \PYG{p}{\PYGZob{}}
            \PYG{k}{return} \PYG{k}{await} \PYG{n}{Task}\PYG{p}{.}\PYG{n}{Run}\PYG{p}{(()} \PYG{p}{=\PYGZgt{}}
            \PYG{p}{\PYGZob{}}
                \PYG{n}{context}\PYG{p}{.}\PYG{n}{Logger}\PYG{p}{.}\PYG{n}{Log}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}entering function\PYGZdq{}}\PYG{p}{);}
                \PYG{k}{using} \PYG{p}{(}\PYG{k+kt}{var} \PYG{n}{db} \PYG{p}{=} \PYG{k}{new} \PYG{n}{ReVersion\PYGZus{}DatabaseContext}\PYG{p}{())}
                \PYG{p}{\PYGZob{}}
                    \PYG{k}{if} \PYG{p}{(}\PYG{n}{request}\PYG{p}{.}\PYG{n}{Headers} \PYG{p}{==} \PYG{k}{null} \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{Headers}\PYG{p}{.}\PYG{n}{ContainsKey}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}username\PYGZdq{}}\PYG{p}{))}
                        \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}

                    \PYG{n}{context}\PYG{p}{.}\PYG{n}{Logger}\PYG{p}{.}\PYG{n}{Log}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}passed initial parameter check\PYGZdq{}}\PYG{p}{);}

                    \PYG{k+kt}{string} \PYG{n}{user}\PYG{p}{;}
                    \PYG{k}{if} \PYG{p}{(!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{Headers}\PYG{p}{.}\PYG{n}{TryGetValue}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}username\PYGZdq{}}\PYG{p}{,} \PYG{k}{out} \PYG{n}{user}\PYG{p}{))}
                        \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{BadRequest} \PYG{p}{\PYGZcb{};}

                    \PYG{n}{context}\PYG{p}{.}\PYG{n}{Logger}\PYG{p}{.}\PYG{n}{Log}\PYG{p}{(}\PYG{err}{\PYGZdl{}}\PYG{l+s}{\PYGZdq{}username is \PYGZob{}user\PYGZcb{}\PYGZdq{}}\PYG{p}{);}

                    \PYG{n}{List}\PYG{p}{\PYGZlt{}}\PYG{n}{PermissionLookup}\PYG{p}{\PYGZgt{}} \PYG{n}{permissions} \PYG{p}{=} \PYG{n}{QueryPermissionRequests}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{user}\PYG{p}{);}

                    \PYG{n}{context}\PYG{p}{.}\PYG{n}{Logger}\PYG{p}{.}\PYG{n}{Log}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}okay, i just made a database call\PYGZdq{}}\PYG{p}{);}

                    \PYG{n}{List}\PYG{p}{\PYGZlt{}}\PYG{n}{ResourceItem}\PYG{p}{\PYGZgt{}} \PYG{n}{responseObject} \PYG{p}{=}
                        \PYG{n}{permissions}\PYG{p}{.}\PYG{n}{Select}\PYG{p}{(}\PYG{n}{x} \PYG{p}{=\PYGZgt{}} \PYG{k}{new} \PYG{n}{ResourceItem}
                        \PYG{p}{\PYGZob{}}
                            \PYG{n}{DisplayData} \PYG{p}{=} \PYG{err}{\PYGZdl{}}\PYG{l+s}{\PYGZdq{}\PYGZob{}x.RequestingUser\PYGZcb{} requested access to \PYGZob{}x.RepositoryName\PYGZcb{} on \PYGZdq{}} \PYG{p}{+} \PYG{n}{x}\PYG{p}{.}\PYG{n}{LogTimestamp}\PYG{p}{.}\PYG{n}{ToString}\PYG{p}{(}\PYG{l+s}{@\PYGZdq{}MM/dd/yy H:mm tt\PYGZdq{}}\PYG{p}{),}
                            \PYG{n}{Href} \PYG{p}{=} \PYG{err}{\PYGZdl{}}\PYG{l+s}{\PYGZdq{}repositories/\PYGZob{}x.RequestId\PYGZcb{}\PYGZdq{}}
                        \PYG{p}{\PYGZcb{}).}\PYG{n}{ToList}\PYG{p}{();}

                    \PYG{n}{context}\PYG{p}{.}\PYG{n}{Logger}\PYG{p}{.}\PYG{n}{Log}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}i just made the response object\PYGZdq{}}\PYG{p}{);}

                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse}
                    \PYG{p}{\PYGZob{}}
                        \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{OK}\PYG{p}{,}
                        \PYG{n}{Body} \PYG{p}{=} \PYG{n}{JsonConvert}\PYG{p}{.}\PYG{n}{SerializeObject}\PYG{p}{(}\PYG{k}{new} \PYG{p}{\PYGZob{}} \PYG{n}{Resources} \PYG{p}{=} \PYG{n}{responseObject} \PYG{p}{\PYGZcb{}),}
                        \PYG{n}{Headers} \PYG{p}{=} \PYG{k}{new} \PYG{n}{Dictionary}\PYG{p}{\PYGZlt{}}\PYG{k+kt}{string}\PYG{p}{,} \PYG{k+kt}{string}\PYG{p}{\PYGZgt{}} \PYG{p}{\PYGZob{}} \PYG{p}{\PYGZob{}} \PYG{l+s}{\PYGZdq{}Content\PYGZhy{}Type\PYGZdq{}}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}application/json\PYGZdq{}} \PYG{p}{\PYGZcb{}} \PYG{p}{\PYGZcb{}}
                    \PYG{p}{\PYGZcb{};}
                \PYG{p}{\PYGZcb{}}
            \PYG{p}{\PYGZcb{});}
        \PYG{p}{\PYGZcb{}}

        \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
        \PYG{c+c1}{/// A Lambda function that grants a user\PYGZsq{}s request to access a repository}
        \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}request\PYGZdq{}\PYGZgt{}\PYGZlt{}/param\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}\PYGZlt{}/returns\PYGZgt{}}
        \PYG{k}{public} \PYG{k}{async} \PYG{n}{Task}\PYG{p}{\PYGZlt{}}\PYG{n}{APIGatewayProxyResponse}\PYG{p}{\PYGZgt{}} \PYG{n}{GrantPermissionAsync}\PYG{p}{(}\PYG{n}{APIGatewayProxyRequest} \PYG{n}{request}\PYG{p}{,} \PYG{n}{ILambdaContext} \PYG{n}{context}\PYG{p}{)}
        \PYG{p}{\PYGZob{}}
            \PYG{k}{using} \PYG{p}{(}\PYG{k+kt}{var} \PYG{n}{db} \PYG{p}{=} \PYG{k}{new} \PYG{n}{ReVersion\PYGZus{}DatabaseContext}\PYG{p}{())}
            \PYG{p}{\PYGZob{}}
                \PYG{k}{if} \PYG{p}{(}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters} \PYG{p}{==} \PYG{k}{null} \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{ContainsKey}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}requestId\PYGZdq{}}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}

                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{TryGetValue}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}requestId\PYGZdq{}}\PYG{p}{,} \PYG{k}{out} \PYG{k+kt}{string} \PYG{n}{permissionRequest}\PYG{p}{))}
                \PYG{p}{\PYGZob{}}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}
                \PYG{p}{\PYGZcb{}}

                \PYG{k+kt}{int} \PYG{n}{requestId}\PYG{p}{;}
                \PYG{k}{try}
                \PYG{p}{\PYGZob{}}
                    \PYG{n}{requestId} \PYG{p}{=} \PYG{n}{Convert}\PYG{p}{.}\PYG{n}{ToInt32}\PYG{p}{(}\PYG{n}{permissionRequest}\PYG{p}{);}
                \PYG{p}{\PYGZcb{}}
                \PYG{k}{catch} \PYG{p}{(}\PYG{n}{Exception}\PYG{p}{)}
                \PYG{p}{\PYGZob{}}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{BadRequest} \PYG{p}{\PYGZcb{};}
                \PYG{p}{\PYGZcb{}}


                \PYG{n}{LogData} \PYG{n}{requestBody}\PYG{p}{;}
                \PYG{k}{try}
                \PYG{p}{\PYGZob{}}
                    \PYG{n}{requestBody} \PYG{p}{=} \PYG{n}{JsonConvert}\PYG{p}{.}\PYG{n}{DeserializeObject}\PYG{p}{\PYGZlt{}}\PYG{n}{LogData}\PYG{p}{\PYGZgt{}(}\PYG{n}{request}\PYG{p}{.}\PYG{n}{Body}\PYG{p}{);}
                \PYG{p}{\PYGZcb{}}
                \PYG{k}{catch} \PYG{p}{(}\PYG{n}{Exception}\PYG{p}{)}
                \PYG{p}{\PYGZob{}}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}
                \PYG{p}{\PYGZcb{}}

                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{UsernameExists}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{UserName}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{BadRequest} \PYG{p}{\PYGZcb{};}

                \PYG{k+kt}{string} \PYG{n}{repo} \PYG{p}{=} \PYG{n}{QueryRepositoryNameFromRequest}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{requestId}\PYG{p}{);}

                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{UserOwnsRepository}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{UserName}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{Forbidden} \PYG{p}{\PYGZcb{};}

                \PYG{n}{InsertIntoRepoPermissionsTable}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{UserName}\PYG{p}{);}
                \PYG{n}{DeleteFromPermissionRequestTable}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{requestId}\PYG{p}{);}
                \PYG{n}{InsertIntoEventLog}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}main\PYGZdq{}}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{UserName}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{Message}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}grant\PYGZus{}permission\PYGZdq{}}\PYG{p}{);}

                \PYG{k}{await} \PYG{n}{db}\PYG{p}{.}\PYG{n}{SaveChangesAsync}\PYG{p}{();}
                \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse}
                \PYG{p}{\PYGZob{}}
                    \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{NoContent}\PYG{p}{,}
                    \PYG{n}{Headers} \PYG{p}{=} \PYG{k}{new} \PYG{n}{Dictionary}\PYG{p}{\PYGZlt{}}\PYG{k+kt}{string}\PYG{p}{,} \PYG{k+kt}{string}\PYG{p}{\PYGZgt{}} \PYG{p}{\PYGZob{}} \PYG{p}{\PYGZob{}} \PYG{l+s}{\PYGZdq{}Content\PYGZhy{}Type\PYGZdq{}}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}application/json\PYGZdq{}} \PYG{p}{\PYGZcb{}} \PYG{p}{\PYGZcb{}}
                \PYG{p}{\PYGZcb{};}
            \PYG{p}{\PYGZcb{}}
        \PYG{p}{\PYGZcb{}}

        \PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
        \PYG{c+c1}{/// A Lambda function that rejects a user\PYGZsq{}s request to access a repository}
        \PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}request\PYGZdq{}\PYGZgt{}\PYGZlt{}/param\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}\PYGZlt{}/returns\PYGZgt{}}
        \PYG{k}{public} \PYG{k}{async} \PYG{n}{Task}\PYG{p}{\PYGZlt{}}\PYG{n}{APIGatewayProxyResponse}\PYG{p}{\PYGZgt{}} \PYG{n}{DenyPermissionAsync}\PYG{p}{(}\PYG{n}{APIGatewayProxyRequest} \PYG{n}{request}\PYG{p}{,} \PYG{n}{ILambdaContext} \PYG{n}{context}\PYG{p}{)}
        \PYG{p}{\PYGZob{}}
            \PYG{k}{using} \PYG{p}{(}\PYG{k+kt}{var} \PYG{n}{db} \PYG{p}{=} \PYG{k}{new} \PYG{n}{ReVersion\PYGZus{}DatabaseContext}\PYG{p}{())}
            \PYG{p}{\PYGZob{}}
                \PYG{k}{if} \PYG{p}{(}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters} \PYG{p}{==} \PYG{k}{null} \PYG{p}{||} \PYG{p}{!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{ContainsKey}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}requestId\PYGZdq{}}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}

                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{request}\PYG{p}{.}\PYG{n}{PathParameters}\PYG{p}{.}\PYG{n}{TryGetValue}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}requestId\PYGZdq{}}\PYG{p}{,} \PYG{k}{out} \PYG{k+kt}{string} \PYG{n}{permissionRequest}\PYG{p}{))}
                \PYG{p}{\PYGZob{}}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}
                \PYG{p}{\PYGZcb{}}

                \PYG{k+kt}{int} \PYG{n}{requestId}\PYG{p}{;}
                \PYG{k}{try}
                \PYG{p}{\PYGZob{}}
                    \PYG{n}{requestId} \PYG{p}{=} \PYG{n}{Convert}\PYG{p}{.}\PYG{n}{ToInt32}\PYG{p}{(}\PYG{n}{permissionRequest}\PYG{p}{);}
                \PYG{p}{\PYGZcb{}}
                \PYG{k}{catch} \PYG{p}{(}\PYG{n}{Exception}\PYG{p}{)}
                \PYG{p}{\PYGZob{}}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{BadRequest} \PYG{p}{\PYGZcb{};}
                \PYG{p}{\PYGZcb{}}


                \PYG{n}{LogData} \PYG{n}{requestBody}\PYG{p}{;}
                \PYG{k}{try}
                \PYG{p}{\PYGZob{}}
                    \PYG{n}{requestBody} \PYG{p}{=} \PYG{n}{JsonConvert}\PYG{p}{.}\PYG{n}{DeserializeObject}\PYG{p}{\PYGZlt{}}\PYG{n}{LogData}\PYG{p}{\PYGZgt{}(}\PYG{n}{request}\PYG{p}{.}\PYG{n}{Body}\PYG{p}{);}
                \PYG{p}{\PYGZcb{}}
                \PYG{k}{catch} \PYG{p}{(}\PYG{n}{Exception}\PYG{p}{)}
                \PYG{p}{\PYGZob{}}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{InternalServerError} \PYG{p}{\PYGZcb{};}
                \PYG{p}{\PYGZcb{}}

                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{UsernameExists}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{UserName}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{BadRequest} \PYG{p}{\PYGZcb{};}

                \PYG{k+kt}{string} \PYG{n}{repo} \PYG{p}{=} \PYG{n}{QueryRepositoryNameFromRequest}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{requestId}\PYG{p}{);}

                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{UserOwnsRepository}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{UserName}\PYG{p}{))}
                    \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse} \PYG{p}{\PYGZob{}} \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{Forbidden} \PYG{p}{\PYGZcb{};}

                \PYG{n}{DeleteFromPermissionRequestTable}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{requestId}\PYG{p}{);}
                \PYG{n}{InsertIntoEventLog}\PYG{p}{(}\PYG{n}{db}\PYG{p}{,} \PYG{n}{repo}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}main\PYGZdq{}}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{UserName}\PYG{p}{,} \PYG{n}{requestBody}\PYG{p}{.}\PYG{n}{Message}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}deny\PYGZus{}permission\PYGZdq{}}\PYG{p}{);}

                \PYG{k}{await} \PYG{n}{db}\PYG{p}{.}\PYG{n}{SaveChangesAsync}\PYG{p}{();}
                \PYG{k}{return} \PYG{k}{new} \PYG{n}{APIGatewayProxyResponse}
                \PYG{p}{\PYGZob{}}
                    \PYG{n}{StatusCode} \PYG{p}{=} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{HttpStatusCode}\PYG{p}{.}\PYG{n}{NoContent}\PYG{p}{,}
                    \PYG{n}{Headers} \PYG{p}{=} \PYG{k}{new} \PYG{n}{Dictionary}\PYG{p}{\PYGZlt{}}\PYG{k+kt}{string}\PYG{p}{,} \PYG{k+kt}{string}\PYG{p}{\PYGZgt{}} \PYG{p}{\PYGZob{}} \PYG{p}{\PYGZob{}} \PYG{l+s}{\PYGZdq{}Content\PYGZhy{}Type\PYGZdq{}}\PYG{p}{,} \PYG{l+s}{\PYGZdq{}application/json\PYGZdq{}} \PYG{p}{\PYGZcb{}} \PYG{p}{\PYGZcb{}}
                \PYG{p}{\PYGZcb{};}
            \PYG{p}{\PYGZcb{}}
        \PYG{p}{\PYGZcb{}}


        \PYG{c+c1}{/// \PYGZlt{}exception cref=\PYGZdq{}ArgumentNullException\PYGZdq{}\PYGZgt{}from call to Convert.FromBase64String\PYGZlt{}/exception\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}exception cref=\PYGZdq{}FormatException\PYGZdq{}\PYGZgt{}from call to Convert.FromBase64String if not in base64 format\PYGZlt{}/exception\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}exception cref=\PYGZdq{}ArgumentException\PYGZdq{}\PYGZgt{}from call to Encoding.GetString if byte array contains invalid Unicode code points\PYGZlt{}/exception\PYGZgt{}}
        \PYG{c+c1}{/// \PYGZlt{}exception cref=\PYGZdq{}DecoderFallbackException\PYGZdq{}\PYGZgt{}if fallback occurred due to character encodinng in .NET}
        \PYG{c+c1}{///                                        AND \PYGZdq{}DecoderFallback\PYGZdq{} is set to \PYGZdq{}DecoderExceptionFallback\PYGZdq{}\PYGZlt{}/exception\PYGZgt{}}
        \PYG{k}{private} \PYG{k+kt}{string} \PYG{n+nf}{DecodeBase64String}\PYG{p}{(}\PYG{k+kt}{string} \PYG{n}{str}\PYG{p}{)}
            \PYG{p}{=\PYGZgt{}} \PYG{n}{Encoding}\PYG{p}{.}\PYG{n}{UTF8}\PYG{p}{.}\PYG{n}{GetString}\PYG{p}{(}\PYG{n}{Convert}\PYG{p}{.}\PYG{n}{FromBase64String}\PYG{p}{(}\PYG{n}{str}\PYG{p}{));}

        \PYG{k}{private} \PYG{k+kt}{string} \PYG{n+nf}{EncodeBase64String}\PYG{p}{(}\PYG{k+kt}{string} \PYG{n}{str}\PYG{p}{)} \PYG{p}{=\PYGZgt{}}
            \PYG{n}{Convert}\PYG{p}{.}\PYG{n}{ToBase64String}\PYG{p}{(}\PYG{n}{Encoding}\PYG{p}{.}\PYG{n}{UTF8}\PYG{p}{.}\PYG{n}{GetBytes}\PYG{p}{(}\PYG{n}{str}\PYG{p}{));}

        \PYG{k}{private} \PYG{k+kt}{bool} \PYG{n+nf}{BucketNameValid}\PYG{p}{(}\PYG{n}{ReVersion\PYGZus{}DatabaseContext} \PYG{n}{db}\PYG{p}{,} \PYG{k+kt}{string} \PYG{n}{bucketName}\PYG{p}{)}
        \PYG{p}{\PYGZob{}}
            \PYG{k+kt}{var} \PYG{n}{nameArray} \PYG{p}{=} \PYG{n}{bucketName}\PYG{p}{.}\PYG{n}{Split}\PYG{p}{(}\PYG{l+s+sc}{\PYGZsq{}.\PYGZsq{}}\PYG{p}{);}
            \PYG{k}{if} \PYG{p}{(}\PYG{n}{nameArray}\PYG{p}{.}\PYG{n}{Length} \PYG{p}{!=} \PYG{l+m}{3}\PYG{p}{)} \PYG{k}{return} \PYG{k}{false}\PYG{p}{;}
            \PYG{k}{if} \PYG{p}{(!}\PYG{n}{nameArray}\PYG{p}{[}\PYG{l+m}{0}\PYG{p}{].}\PYG{n}{Equals}\PYG{p}{(}\PYG{n}{S3Operations}\PYG{p}{.}\PYG{n}{bucketPrefix}\PYG{p}{))} \PYG{k}{return} \PYG{k}{false}\PYG{p}{;}
            \PYG{c+cm}{/*}
\PYG{c+cm}{            if (nameArray[2].ToLower().Equals(\PYGZdq{}main\PYGZdq{}) \PYGZam{}\PYGZam{} RepositoryExists(db, nameArray[1])) return false;}
\PYG{c+cm}{            if (!nameArray[2].ToLower().Equals(\PYGZdq{}main\PYGZdq{}) \PYGZam{}\PYGZam{} BranchExists(db, nameArray[1], nameArray[2])) return false;}
\PYG{c+cm}{            */}
            \PYG{k}{foreach} \PYG{p}{(}\PYG{k+kt}{string} \PYG{n}{str} \PYG{k}{in} \PYG{n}{nameArray}\PYG{p}{)}
            \PYG{p}{\PYGZob{}}
                \PYG{k}{if} \PYG{p}{(}\PYG{n}{Regex}\PYG{p}{.}\PYG{n}{IsMatch}\PYG{p}{(}\PYG{n}{str}\PYG{p}{,} \PYG{l+s}{@\PYGZdq{}[\PYGZbs{}s.\PYGZus{}]\PYGZdq{}}\PYG{p}{))} \PYG{k}{return} \PYG{k}{false}\PYG{p}{;}
                \PYG{k}{if} \PYG{p}{(}\PYG{n}{str}\PYG{p}{.}\PYG{n}{Length} \PYG{p}{\PYGZgt{}} \PYG{l+m}{25}\PYG{p}{)} \PYG{k}{return} \PYG{k}{false}\PYG{p}{;}
                \PYG{k}{if} \PYG{p}{(!}\PYG{n}{Regex}\PYG{p}{.}\PYG{n}{IsMatch}\PYG{p}{(}\PYG{n}{str}\PYG{p}{,} \PYG{l+s}{@\PYGZdq{}\PYGZca{}[a\PYGZhy{}zA\PYGZhy{}Z0\PYGZhy{}9][a\PYGZhy{}zA\PYGZhy{}Z0\PYGZhy{}9\PYGZhy{}]*[a\PYGZhy{}zA\PYGZhy{}Z0\PYGZhy{}9]\PYGZdl{}\PYGZdq{}}\PYG{p}{))} \PYG{k}{return} \PYG{k}{false}\PYG{p}{;}
            \PYG{p}{\PYGZcb{}}

            \PYG{k}{return} \PYG{k}{true}\PYG{p}{;}
        \PYG{p}{\PYGZcb{}}

    \PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}
\end{Verbatim}
